{"version":3,"sources":["../../src/visualizations/Renderer.tsx"],"names":["Renderer","type","data","optionsProp","options","visualizationName","addonBefore","addonAfter","otherProps","lastOptions","errorHandlerRef","registeredVisualizations","getOptions","current","reset"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;AAYe,SAASA,QAAT,OAQL;AAAA,MAPRC,IAOQ,QAPRA,IAOQ;AAAA,MANRC,IAMQ,QANRA,IAMQ;AAAA,MALCC,WAKD,QALRC,OAKQ;AAAA,MAJRC,iBAIQ,QAJRA,iBAIQ;AAAA,MAHRC,WAGQ,QAHRA,WAGQ;AAAA,MAFRC,UAEQ,QAFRA,UAEQ;AAAA,MADLC,UACK;;AACR,MAAMC,WAAW,GAAG,oBAApB;AACA,MAAMC,eAAe,GAAG,oBAAxB,CAFQ,CAIR;;AAJQ,8BAKyBC,kCAAyBV,IAAzB,CALzB;AAAA,MAKAD,QALA,yBAKAA,QALA;AAAA,MAKUY,UALV,yBAKUA,UALV,EAOR;AACA;AACA;AACA;;AACA,MAAIR,OAAO,GAAGQ,UAAU,CAACT,WAAD,EAAcD,IAAd,CAAxB;;AACA,MAAI,qBAAQO,WAAW,CAACI,OAApB,EAA6BT,OAA7B,CAAJ,EAA2C;AACzCA,IAAAA,OAAO,GAAGK,WAAW,CAACI,OAAtB;AACD;;AACDJ,EAAAA,WAAW,CAACI,OAAZ,GAAsBT,OAAtB;AAEA,wBAAU,MAAM;AACd,QAAIM,eAAe,CAACG,OAApB,EAA6B;AAC3B;AACAH,MAAAA,eAAe,CAACG,OAAhB,CAAwBC,KAAxB;AACD;AACF,GALD,EAKG,CAACX,WAAD,EAAcD,IAAd,CALH;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGI,WADH,eAGE,6BAAC,sBAAD;AACE,IAAA,GAAG,EAAEI,eADP;AAEE,IAAA,WAAW,EAAE,mBAAM,6BAAC,2BAAD;AAFrB,kBAGE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE,6BAAC,QAAD;AAAU,IAAA,OAAO,EAAEN,OAAnB;AAA4B,IAAA,IAAI,EAAEF,IAAlC;AAAwC,IAAA,iBAAiB,EAAEG;AAA3D,KAAkFG,UAAlF,EADF,CAHF,CAHF,EAUGD,UAVH,CADF;AAcD","sourcesContent":["import { isEqual } from \"lodash\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport ErrorBoundary, { ErrorMessage } from \"@/components/ErrorBoundary\";\r\nimport { RendererPropTypes } from \"@/visualizations/prop-types\";\r\nimport registeredVisualizations from \"@/visualizations/registeredVisualizations\";\r\n\r\n/*\r\n(ts-migrate) TODO: Migrate the remaining prop types\r\n...RendererPropTypes\r\n*/\r\ntype Props = {\r\n  type: string;\r\n  addonBefore?: React.ReactNode;\r\n  addonAfter?: React.ReactNode;\r\n} & typeof RendererPropTypes;\r\n\r\nexport default function Renderer({\r\n  type,\r\n  data,\r\n  options: optionsProp,\r\n  visualizationName,\r\n  addonBefore,\r\n  addonAfter,\r\n  ...otherProps\r\n}: Props) {\r\n  const lastOptions = useRef();\r\n  const errorHandlerRef = useRef();\r\n\r\n  // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n  const { Renderer, getOptions } = registeredVisualizations[type];\r\n\r\n  // Avoid unnecessary updates (which may be expensive or cause issues with\r\n  // internal state of some visualizations like Table) - compare options deeply\r\n  // and use saved reference if nothing changed\r\n  // More details: https://github.com/getredash/redash/pull/3963#discussion_r306935810\r\n  let options = getOptions(optionsProp, data);\r\n  if (isEqual(lastOptions.current, options)) {\r\n    options = lastOptions.current;\r\n  }\r\n  lastOptions.current = options;\r\n\r\n  useEffect(() => {\r\n    if (errorHandlerRef.current) {\r\n      // @ts-expect-error ts-migrate(2532) FIXME: Object is possibly 'undefined'.\r\n      errorHandlerRef.current.reset();\r\n    }\r\n  }, [optionsProp, data]);\r\n\r\n  return (\r\n    <div className=\"visualization-renderer\">\r\n      {addonBefore}\r\n      {/* @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call. */}\r\n      <ErrorBoundary\r\n        ref={errorHandlerRef}\r\n        renderError={() => <ErrorMessage>Error while rendering visualization.</ErrorMessage>}>\r\n        <div className=\"visualization-renderer-wrapper\">\r\n          <Renderer options={options} data={data} visualizationName={visualizationName} {...otherProps} />\r\n        </div>\r\n      </ErrorBoundary>\r\n      {addonAfter}\r\n    </div>\r\n  );\r\n}\r\n"],"file":"Renderer.js"}