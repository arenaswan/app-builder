{"version":3,"sources":["../../../src/visualizations/cohort/prepareData.ts"],"names":["momentInterval","weekly","daily","monthly","groupData","sortedData","result","_","each","item","date","groupKey","valueOf","total","parseInt","values","stage","value","prepareDiagonalData","options","timeInterval","grouped","firstStage","min","map","i","stageCount","last","diff","first","lastStage","previousDate","data","group","Math","abs","row","push","prepareSimpleData","stages","max","isDataValid","rawData","columnNames","columns","c","name","rows","length","includes","dateColumn","stageColumn","totalColumn","valueColumn","prepareData","initialDate","parseFloat","sortBy","r","toDate","mode"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,OADa;AAErBC,EAAAA,KAAK,EAAE,MAFc;AAGrBC,EAAAA,OAAO,EAAE;AAHY,CAAvB;;AAMA,SAASC,SAAT,CAAmBC,UAAnB,EAAoC;AAClC,MAAMC,MAAM,GAAG,EAAf;;AAEAC,kBAAEC,IAAF,CAAOH,UAAP,EAAmBI,IAAI,IAAI;AACzB,QAAMC,IAAI,GAAG,qBAAOD,IAAI,CAACC,IAAZ,CAAb;AACA,QAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAL,EAAjB,CAFyB,CAGzB;;AACAN,IAAAA,MAAM,CAACK,QAAD,CAAN,GAAmBL,MAAM,CAACK,QAAD,CAAN,IAAoB;AACrCD,MAAAA,IADqC;AAErCG,MAAAA,KAAK,EAAEC,QAAQ,CAACL,IAAI,CAACI,KAAN,EAAa,EAAb,CAAR,IAA4B,CAFE;AAGrCE,MAAAA,MAAM,EAAE;AAH6B,KAAvC,CAJyB,CASzB;;AACAT,IAAAA,MAAM,CAACK,QAAD,CAAN,CAAiBI,MAAjB,CAAwBN,IAAI,CAACO,KAA7B,IAAsCF,QAAQ,CAACL,IAAI,CAACQ,KAAN,EAAa,EAAb,CAAR,IAA4B,IAAlE;AACD,GAXD;;AAaA,SAAOV,gBAAEQ,MAAF,CAAST,MAAT,CAAP;AACD;;AAED,SAASY,mBAAT,CAA6Bb,UAA7B,EAA8Cc,OAA9C,EAA4D;AAC1D,MAAMC,YAAY,GAAGD,OAAO,CAACC,YAA7B;AACA,MAAMC,OAAO,GAAGjB,SAAS,CAACC,UAAD,CAAzB;;AACA,MAAMiB,UAAU,GAAGf,gBAAEgB,GAAF,CAAMhB,gBAAEiB,GAAF,CAAMnB,UAAN,EAAkBoB,CAAC,IAAIA,CAAC,CAACT,KAAzB,CAAN,CAAnB,CAH0D,CAI1D;;;AACA,MAAMU,UAAU,GAAG,qBAAOnB,gBAAEoB,IAAF,CAAON,OAAP,EAAgBX,IAAvB,EAA6BkB,IAA7B,CAAkCrB,gBAAEsB,KAAF,CAAQR,OAAR,EAAiBX,IAAnD,EAAyDV,cAAc,CAACoB,YAAD,CAAvE,CAAnB;AACA,MAAIU,SAAS,GAAGR,UAAU,GAAGI,UAA7B;AAEA,MAAIK,YAAiB,GAAG,IAAxB;AAEA,MAAMC,IAAS,GAAG,EAAlB;;AACAzB,kBAAEC,IAAF,CAAOa,OAAP,EAAgBY,KAAK,IAAI;AACvB,QAAIF,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA,UAAIH,IAAI,GAAGM,IAAI,CAACC,GAAL,CAASJ,YAAY,CAACH,IAAb,CAAkBK,KAAK,CAACvB,IAAxB,EAA8BV,cAAc,CAACoB,YAAD,CAA5C,CAAT,CAAX;;AACA,aAAOQ,IAAI,GAAG,CAAd,EAAiB;AACf,YAAMQ,IAAG,GAAG,CAAC,CAAD,CAAZ;;AACA,aAAK,IAAIpB,KAAK,GAAGM,UAAjB,EAA6BN,KAAK,IAAIc,SAAtC,EAAiDd,KAAK,IAAI,CAA1D,EAA6D;AAC3D;AACAoB,UAAAA,IAAG,CAACC,IAAJ,CAASJ,KAAK,CAAClB,MAAN,CAAaC,KAAb,KAAuB,CAAhC;AACD;;AACDgB,QAAAA,IAAI,CAACK,IAAL,CAAUD,IAAV,EANe,CAOf;;AACAN,QAAAA,SAAS,IAAI,CAAb;AACAF,QAAAA,IAAI,IAAI,CAAR;AACD;AACF,KAfsB,CAiBvB;;;AACAG,IAAAA,YAAY,GAAGE,KAAK,CAACvB,IAArB,CAlBuB,CAoBvB;;AACA,QAAM0B,GAAG,GAAG,CAACH,KAAK,CAACpB,KAAP,CAAZ;;AACA,SAAK,IAAIG,MAAK,GAAGM,UAAjB,EAA6BN,MAAK,IAAIc,SAAtC,EAAiDd,MAAK,IAAI,CAA1D,EAA6D;AAC3D;AACAoB,MAAAA,GAAG,CAACC,IAAJ,CAASJ,KAAK,CAAClB,MAAN,CAAaC,MAAb,KAAuB,CAAhC;AACD,KAzBsB,CA0BvB;;;AACAc,IAAAA,SAAS,IAAI,CAAb;AAEAE,IAAAA,IAAI,CAACK,IAAL,CAAUD,GAAV;AACD,GA9BD;;AAgCA,SAAOJ,IAAP;AACD;;AAED,SAASM,iBAAT,CAA2BjC,UAA3B,EAA4Cc,OAA5C,EAA0D;AACxD,MAAMC,YAAY,GAAGD,OAAO,CAACC,YAA7B;AACA,MAAMC,OAAO,GAAGjB,SAAS,CAACC,UAAD,CAAzB;;AACA,MAAMkC,MAAM,GAAGhC,gBAAEiB,GAAF,CAAMnB,UAAN,EAAkBoB,CAAC,IAAIA,CAAC,CAACT,KAAzB,CAAf;;AACA,MAAMM,UAAU,GAAGf,gBAAEgB,GAAF,CAAMgB,MAAN,CAAnB;;AACA,MAAMT,SAAS,GAAGvB,gBAAEiC,GAAF,CAAMD,MAAN,CAAlB;;AAEA,MAAIR,YAAiB,GAAG,IAAxB;AAEA,MAAMC,IAAS,GAAG,EAAlB;;AACAzB,kBAAEC,IAAF,CAAOa,OAAP,EAAgBY,KAAK,IAAI;AACvB,QAAIF,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA,UAAIH,IAAI,GAAGM,IAAI,CAACC,GAAL,CAASJ,YAAY,CAACH,IAAb,CAAkBK,KAAK,CAACvB,IAAxB,EAA8BV,cAAc,CAACoB,YAAD,CAA5C,CAAT,CAAX;;AACA,aAAOQ,IAAI,GAAG,CAAd,EAAiB;AACfI,QAAAA,IAAI,CAACK,IAAL,CAAU,CAAC,CAAD,CAAV;AACAT,QAAAA,IAAI,IAAI,CAAR;AACD;AACF,KARsB,CAUvB;;;AACAG,IAAAA,YAAY,GAAGE,KAAK,CAACvB,IAArB,CAXuB,CAavB;;AACA,QAAM0B,GAAG,GAAG,CAACH,KAAK,CAACpB,KAAP,CAAZ;;AACA,SAAK,IAAIG,KAAK,GAAGM,UAAjB,EAA6BN,KAAK,IAAIc,SAAtC,EAAiDd,KAAK,IAAI,CAA1D,EAA6D;AAC3D;AACAoB,MAAAA,GAAG,CAACC,IAAJ,CAASJ,KAAK,CAAClB,MAAN,CAAaC,KAAb,CAAT;AACD;;AAEDgB,IAAAA,IAAI,CAACK,IAAL,CAAUD,GAAV;AACD,GArBD;;AAuBA,SAAOJ,IAAP;AACD;;AAED,SAASS,WAAT,CAAqBC,OAArB,EAAmCvB,OAAnC,EAAiD;AAC/C,MAAMwB,WAAW,GAAGpC,gBAAEiB,GAAF,CAAMkB,OAAO,CAACE,OAAd,EAAuBC,CAAC,IAAIA,CAAC,CAACC,IAA9B,CAApB;;AACA,SACEJ,OAAO,CAACK,IAAR,CAAaC,MAAb,GAAsB,CAAtB,IACAzC,gBAAE0C,QAAF,CAAWN,WAAX,EAAwBxB,OAAO,CAAC+B,UAAhC,CADA,IAEA3C,gBAAE0C,QAAF,CAAWN,WAAX,EAAwBxB,OAAO,CAACgC,WAAhC,CAFA,IAGA5C,gBAAE0C,QAAF,CAAWN,WAAX,EAAwBxB,OAAO,CAACiC,WAAhC,CAHA,IAIA7C,gBAAE0C,QAAF,CAAWN,WAAX,EAAwBxB,OAAO,CAACkC,WAAhC,CALF;AAOD;;AAEc,SAASC,WAAT,CAAqBZ,OAArB,EAAmCvB,OAAnC,EAAiD;AAC9D,MAAI,CAACsB,WAAW,CAACC,OAAD,EAAUvB,OAAV,CAAhB,EAAoC;AAClC,WAAO;AAAEa,MAAAA,IAAI,EAAE,EAAR;AAAYuB,MAAAA,WAAW,EAAE;AAAzB,KAAP;AACD;;AAEDb,EAAAA,OAAO,GAAGnC,gBAAEiB,GAAF,CAAMkB,OAAO,CAACK,IAAd,EAAoBtC,IAAI,KAAK;AACrCC,IAAAA,IAAI,EAAED,IAAI,CAACU,OAAO,CAAC+B,UAAT,CAD2B;AAErClC,IAAAA,KAAK,EAAEF,QAAQ,CAACL,IAAI,CAACU,OAAO,CAACgC,WAAT,CAAL,EAA4B,EAA5B,CAFsB;AAGrCtC,IAAAA,KAAK,EAAE2C,UAAU,CAAC/C,IAAI,CAACU,OAAO,CAACiC,WAAT,CAAL,CAHoB;AAIrCnC,IAAAA,KAAK,EAAEuC,UAAU,CAAC/C,IAAI,CAACU,OAAO,CAACkC,WAAT,CAAL;AAJoB,GAAL,CAAxB,CAAV;;AAMA,MAAMhD,UAAU,GAAGE,gBAAEkD,MAAF,CAASf,OAAT,EAAkBgB,CAAC,IAAIA,CAAC,CAAChD,IAAF,GAASgD,CAAC,CAAC1C,KAAlC,CAAnB;;AACA,MAAMuC,WAAW,GAAG,qBAAOlD,UAAU,CAAC,CAAD,CAAV,CAAcK,IAArB,EAA2BiD,MAA3B,EAApB;AAEA,MAAI3B,IAAJ;;AACA,UAAQb,OAAO,CAACyC,IAAhB;AACE,SAAK,QAAL;AACE5B,MAAAA,IAAI,GAAGM,iBAAiB,CAACjC,UAAD,EAAac,OAAb,CAAxB;AACA;;AACF;AACEa,MAAAA,IAAI,GAAGd,mBAAmB,CAACb,UAAD,EAAac,OAAb,CAA1B;AACA;AANJ;;AASA,SAAO;AAAEa,IAAAA,IAAF;AAAQuB,IAAAA;AAAR,GAAP;AACD","sourcesContent":["import _ from \"lodash\";\r\nimport moment from \"moment\";\r\n\r\nconst momentInterval = {\r\n  weekly: \"weeks\",\r\n  daily: \"days\",\r\n  monthly: \"months\",\r\n};\r\n\r\nfunction groupData(sortedData: any) {\r\n  const result = {};\r\n\r\n  _.each(sortedData, item => {\r\n    const date = moment(item.date);\r\n    const groupKey = date.valueOf();\r\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n    result[groupKey] = result[groupKey] || {\r\n      date,\r\n      total: parseInt(item.total, 10) || 0,\r\n      values: {},\r\n    };\r\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n    result[groupKey].values[item.stage] = parseInt(item.value, 10) || null;\r\n  });\r\n\r\n  return _.values(result);\r\n}\r\n\r\nfunction prepareDiagonalData(sortedData: any, options: any) {\r\n  const timeInterval = options.timeInterval;\r\n  const grouped = groupData(sortedData);\r\n  const firstStage = _.min(_.map(sortedData, i => i.stage));\r\n  // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n  const stageCount = moment(_.last(grouped).date).diff(_.first(grouped).date, momentInterval[timeInterval]);\r\n  let lastStage = firstStage + stageCount;\r\n\r\n  let previousDate: any = null;\r\n\r\n  const data: any = [];\r\n  _.each(grouped, group => {\r\n    if (previousDate !== null) {\r\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n      let diff = Math.abs(previousDate.diff(group.date, momentInterval[timeInterval]));\r\n      while (diff > 1) {\r\n        const row = [0];\r\n        for (let stage = firstStage; stage <= lastStage; stage += 1) {\r\n          // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n          row.push(group.values[stage] || 0);\r\n        }\r\n        data.push(row);\r\n        // It should be diagonal, so decrease count of stages for each next row\r\n        lastStage -= 1;\r\n        diff -= 1;\r\n      }\r\n    }\r\n\r\n    // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n    previousDate = group.date;\r\n\r\n    // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n    const row = [group.total];\r\n    for (let stage = firstStage; stage <= lastStage; stage += 1) {\r\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n      row.push(group.values[stage] || 0);\r\n    }\r\n    // It should be diagonal, so decrease count of stages for each next row\r\n    lastStage -= 1;\r\n\r\n    data.push(row);\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\nfunction prepareSimpleData(sortedData: any, options: any) {\r\n  const timeInterval = options.timeInterval;\r\n  const grouped = groupData(sortedData);\r\n  const stages = _.map(sortedData, i => i.stage);\r\n  const firstStage = _.min(stages);\r\n  const lastStage = _.max(stages);\r\n\r\n  let previousDate: any = null;\r\n\r\n  const data: any = [];\r\n  _.each(grouped, group => {\r\n    if (previousDate !== null) {\r\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n      let diff = Math.abs(previousDate.diff(group.date, momentInterval[timeInterval]));\r\n      while (diff > 1) {\r\n        data.push([0]);\r\n        diff -= 1;\r\n      }\r\n    }\r\n\r\n    // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n    previousDate = group.date;\r\n\r\n    // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n    const row = [group.total];\r\n    for (let stage = firstStage; stage <= lastStage; stage += 1) {\r\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n      row.push(group.values[stage]);\r\n    }\r\n\r\n    data.push(row);\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\nfunction isDataValid(rawData: any, options: any) {\r\n  const columnNames = _.map(rawData.columns, c => c.name);\r\n  return (\r\n    rawData.rows.length > 0 &&\r\n    _.includes(columnNames, options.dateColumn) &&\r\n    _.includes(columnNames, options.stageColumn) &&\r\n    _.includes(columnNames, options.totalColumn) &&\r\n    _.includes(columnNames, options.valueColumn)\r\n  );\r\n}\r\n\r\nexport default function prepareData(rawData: any, options: any) {\r\n  if (!isDataValid(rawData, options)) {\r\n    return { data: [], initialDate: null };\r\n  }\r\n\r\n  rawData = _.map(rawData.rows, item => ({\r\n    date: item[options.dateColumn],\r\n    stage: parseInt(item[options.stageColumn], 10),\r\n    total: parseFloat(item[options.totalColumn]),\r\n    value: parseFloat(item[options.valueColumn]),\r\n  }));\r\n  const sortedData = _.sortBy(rawData, r => r.date + r.stage);\r\n  const initialDate = moment(sortedData[0].date).toDate();\r\n\r\n  let data;\r\n  switch (options.mode) {\r\n    case \"simple\":\r\n      data = prepareSimpleData(sortedData, options);\r\n      break;\r\n    default:\r\n      data = prepareDiagonalData(sortedData, options);\r\n      break;\r\n  }\r\n\r\n  return { data, initialDate };\r\n}\r\n"],"file":"prepareData.js"}