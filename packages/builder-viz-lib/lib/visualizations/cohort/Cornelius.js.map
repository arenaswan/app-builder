{"version":3,"sources":["../../../src/visualizations/cohort/Cornelius.tsx"],"names":["momentInterval","daily","weekly","monthly","yearly","timeLabelFormats","defaultOptions","initialDate","timeInterval","noValuePlaceholder","rawNumberOnHover","displayAbsoluteValues","initialIntervalNumber","maxColumns","Infinity","title","timeColumnTitle","peopleColumnTitle","stageColumnTitle","numberFormat","percentFormat","timeLabelFormat","colors","min","max","steps","prepareOptions","options","formatNumber","formatPercent","getColorForValue","chroma","scale","mode","domain","classes","isLightColor","backgroundColor","white","black","contrast","formatStageTitle","index","formatTimeLabel","offset","interval","clone","add","format","CorneliusHeader","maxRowLength","cells","i","push","CorneliusRow","data","baseValue","value","percentageValue","cellProps","key","className","children","style","color","Cornelius","d","length","row","defaultProps"],"mappings":"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","sourcesContent":["/*!\r\n * React port of Cornelius library (based on v0.1 released under the MIT license)\r\n * Original library: http://restorando.github.io/cornelius\r\n */\r\n\r\nimport { isNil, isFinite, map, extend, min, max } from \"lodash\";\r\nimport moment from \"moment\";\r\nimport chroma from \"chroma-js\";\r\nimport React, { useMemo } from \"react\";\r\nimport Tooltip from \"antd/lib/tooltip\";\r\nimport { createNumberFormatter, formatSimpleTemplate } from \"@/lib/value-format\";\r\nimport chooseTextColorForBackground from \"@/lib/chooseTextColorForBackground\";\r\n\r\nimport \"./cornelius.less\";\r\n\r\nconst momentInterval = {\r\n  daily: \"days\",\r\n  weekly: \"weeks\",\r\n  monthly: \"months\",\r\n  yearly: \"years\",\r\n};\r\n\r\nconst timeLabelFormats = {\r\n  daily: \"MMMM D, YYYY\",\r\n  weekly: \"[Week of] MMM D, YYYY\",\r\n  monthly: \"MMMM YYYY\",\r\n  yearly: \"YYYY\",\r\n};\r\n\r\nconst defaultOptions = {\r\n  initialDate: null,\r\n  timeInterval: \"monthly\",\r\n  noValuePlaceholder: \"-\",\r\n  rawNumberOnHover: true,\r\n  displayAbsoluteValues: false,\r\n  initialIntervalNumber: 1,\r\n  maxColumns: Infinity,\r\n\r\n  title: null,\r\n  timeColumnTitle: \"Time\",\r\n  peopleColumnTitle: \"People\",\r\n  stageColumnTitle: \"{{ @ }}\",\r\n  numberFormat: \"0,0[.]00\",\r\n  percentFormat: \"0.00%\",\r\n  timeLabelFormat: timeLabelFormats.monthly,\r\n\r\n  colors: {\r\n    min: \"#ffffff\",\r\n    max: \"#041d66\",\r\n    steps: 7,\r\n  },\r\n};\r\n\r\nfunction prepareOptions(options: any) {\r\n  options = extend({}, defaultOptions, options, {\r\n    initialDate: moment(options.initialDate),\r\n    colors: extend({}, defaultOptions.colors, options.colors),\r\n  });\r\n\r\n  return extend(options, {\r\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n    timeLabelFormat: timeLabelFormats[options.timeInterval],\r\n    formatNumber: createNumberFormatter(options.numberFormat),\r\n    formatPercent: createNumberFormatter(options.percentFormat),\r\n    getColorForValue: chroma\r\n      .scale([options.colors.min, options.colors.max])\r\n      .mode(\"hsl\")\r\n      .domain([0, 100])\r\n      .classes(options.colors.steps),\r\n  });\r\n}\r\n\r\nfunction isLightColor(backgroundColor: any) {\r\n  backgroundColor = chroma(backgroundColor);\r\n  const white = \"#ffffff\";\r\n  const black = \"#000000\";\r\n  return chroma.contrast(backgroundColor, white) < chroma.contrast(backgroundColor, black);\r\n}\r\n\r\nfunction formatStageTitle(options: any, index: any) {\r\n  return formatSimpleTemplate(options.stageColumnTitle, { \"@\": options.initialIntervalNumber - 1 + index });\r\n}\r\n\r\nfunction formatTimeLabel(options: any, offset: any) {\r\n  // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n  const interval = momentInterval[options.timeInterval];\r\n  return options.initialDate\r\n    .clone()\r\n    .add(offset, interval)\r\n    .format(options.timeLabelFormat);\r\n}\r\n\r\nfunction CorneliusHeader({ options, maxRowLength }: any) {\r\n  // eslint-disable-line react/prop-types\r\n  const cells = [];\r\n  for (let i = 1; i < maxRowLength; i += 1) {\r\n    cells.push(\r\n      <th key={`col${i}`} className=\"cornelius-stage\">\r\n        {formatStageTitle(options, i)}\r\n      </th>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <tr>\r\n      <th className=\"cornelius-time\">{options.timeColumnTitle}</th>\r\n      <th className=\"cornelius-people\">{options.peopleColumnTitle}</th>\r\n      {cells}\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction CorneliusRow({ options, data, index, maxRowLength }: any) {\r\n  // eslint-disable-line react/prop-types\r\n  const baseValue = data[0] || 0;\r\n\r\n  const cells = [];\r\n  for (let i = 1; i < maxRowLength; i += 1) {\r\n    const value = data[i];\r\n    const percentageValue = isFinite(value / baseValue) ? (value / baseValue) * 100 : null;\r\n    const cellProps = { key: `col${i}` };\r\n\r\n    if (isNil(percentageValue)) {\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'className' does not exist on type '{ key... Remove this comment to see the full error message\r\n      cellProps.className = \"cornelius-empty\";\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'children' does not exist on type '{ key:... Remove this comment to see the full error message\r\n      cellProps.children = options.noValuePlaceholder;\r\n    } else {\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'className' does not exist on type '{ key... Remove this comment to see the full error message\r\n      cellProps.className = options.displayAbsoluteValues ? \"cornelius-absolute\" : \"cornelius-percentage\";\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'children' does not exist on type '{ key:... Remove this comment to see the full error message\r\n      cellProps.children = options.displayAbsoluteValues\r\n        ? options.formatNumber(value)\r\n        : options.formatPercent(percentageValue);\r\n\r\n      const backgroundColor = options.getColorForValue(percentageValue);\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'style' does not exist on type '{ key: st... Remove this comment to see the full error message\r\n      cellProps.style = {\r\n        backgroundColor,\r\n        color: chooseTextColorForBackground(backgroundColor),\r\n      };\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'style' does not exist on type '{ key: st... Remove this comment to see the full error message\r\n      if (isLightColor(cellProps.style.color)) {\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'className' does not exist on type '{ key... Remove this comment to see the full error message\r\n        cellProps.className += \" cornelius-white-text\";\r\n      }\r\n\r\n      if (options.rawNumberOnHover && !options.displayAbsoluteValues) {\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'children' does not exist on type '{ key:... Remove this comment to see the full error message\r\n        cellProps.children = (\r\n          <Tooltip title={options.formatNumber(value)} mouseEnterDelay={0} mouseLeaveDelay={0}>\r\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'children' does not exist on type '{ key:... Remove this comment to see the full error message */}\r\n            <div>{cellProps.children}</div>\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    cells.push(<td {...cellProps} />);\r\n  }\r\n\r\n  return (\r\n    <tr>\r\n      <td className=\"cornelius-label\">{formatTimeLabel(options, index)}</td>\r\n      <td className=\"cornelius-people\">{options.formatNumber(baseValue)}</td>\r\n      {cells}\r\n    </tr>\r\n  );\r\n}\r\n\r\ntype OwnCorneliusProps = {\r\n  data?: number[][];\r\n  options?: {\r\n    initialDate: any; // TODO: PropTypes.instanceOf(Date)\r\n    timeInterval?: \"daily\" | \"weekly\" | \"monthly\" | \"yearly\";\r\n    noValuePlaceholder?: string;\r\n    rawNumberOnHover?: boolean;\r\n    displayAbsoluteValues?: boolean;\r\n    initialIntervalNumber?: number;\r\n    maxColumns?: number;\r\n    title?: string;\r\n    timeColumnTitle?: string;\r\n    peopleColumnTitle?: string;\r\n    stageColumnTitle?: string;\r\n    numberFormat?: string;\r\n    percentFormat?: string;\r\n    timeLabelFormat?: string;\r\n    colors?: {\r\n      min?: string;\r\n      max?: string;\r\n      steps?: number;\r\n    };\r\n  };\r\n};\r\n\r\ntype CorneliusProps = OwnCorneliusProps & typeof Cornelius.defaultProps;\r\n\r\nexport default function Cornelius({ data, options }: CorneliusProps) {\r\n  options = useMemo(() => prepareOptions(options), [options]);\r\n\r\n  const maxRowLength = useMemo(\r\n    () =>\r\n      min([\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'length' does not exist on type 'number'.\r\n        max(map(data, d => d.length)) || 0,\r\n        // @ts-expect-error ts-migrate(2532) FIXME: Object is possibly 'undefined'.\r\n        options.maxColumns + 1, // each row includes totals, but `maxColumns` is only for stage columns\r\n      ]),\r\n    [data, options.maxColumns]\r\n  );\r\n\r\n  if (data.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"cornelius-container\">\r\n      {options.title && <div className=\"cornelius-title\">{options.title}</div>}\r\n\r\n      <table className=\"cornelius-table\">\r\n        <thead>\r\n          <CorneliusHeader options={options} maxRowLength={maxRowLength} />\r\n        </thead>\r\n        <tbody>\r\n          {map(data, (row, index) => (\r\n            <CorneliusRow key={`row${index}`} options={options} data={row} index={index} maxRowLength={maxRowLength} />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nCornelius.defaultProps = {\r\n  data: [],\r\n  options: {},\r\n};\r\n"],"file":"Cornelius.js"}