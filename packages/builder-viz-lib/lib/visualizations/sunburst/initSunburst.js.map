{"version":3,"sources":["../../../src/visualizations/sunburst/initSunburst.ts"],"names":["exitNode","colors","d3","scale","category10","colorMap","d","name","getAncestors","node","path","current","parent","unshift","buildNodesFromHierarchyData","data","grouped","value","sorted","size","sequence","nodes","i","buildNodesFromTableData","validKey","key","dataKeys","identity","row","isDataInHierarchyFormat","firstRow","field","buildHierarchy","root","children","forEach","parseInt","currentNode","j","nodeName","isLeaf","length","push","childNode","child","isDataValid","rows","initSunburst","element","select","selectAll","remove","width","clientWidth","height","offsetHeight","b","w","h","s","t","radius","Math","min","margin","top","bottom","left","right","totalSize","partition","layout","PI","arc","svg","startAngle","x","endAngle","dx","innerRadius","sqrt","y","outerRadius","dy","vis","breadcrumbs","append","classed","attr","container","summary","sunburst","lastCrumb","breadcrumbPoints","points","join","updateBreadcrumbs","ancestors","percentageString","g","depth","breadcrumb","enter","text","exit","mouseover","percentage","toPrecision","filter","indexOf","html","style","click","on","transition","duration","each","endClick","uniqueNames","a","output","domain","__data__"],"mappings":"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","sourcesContent":["/**\r\n * The following is based on @chrisrzhou's example from: http://bl.ocks.org/chrisrzhou/d5bdd8546f64ca0e4366.\r\n */\r\n\r\nimport * as d3 from \"d3\";\r\nimport { has, map, keys, groupBy, sortBy, filter, find, compact, first, every, identity } from \"lodash\";\r\n\r\nconst exitNode = \"<<<Exit>>>\";\r\n// @ts-expect-error ts-migrate(2339) FIXME: Property 'scale' does not exist on type 'typeof im... Remove this comment to see the full error message\r\nconst colors = d3.scale.category10();\r\n\r\n// helper function colorMap - color gray if \"end\" is detected\r\nfunction colorMap(d: any) {\r\n  return colors(d.name);\r\n}\r\n\r\n// Return array of ancestors of nodes, highest first, but excluding the root.\r\nfunction getAncestors(node: any) {\r\n  const path = [];\r\n  let current = node;\r\n\r\n  while (current.parent) {\r\n    path.unshift(current);\r\n    current = current.parent;\r\n  }\r\n  return path;\r\n}\r\n\r\nfunction buildNodesFromHierarchyData(data: any) {\r\n  const grouped = groupBy(data, \"sequence\");\r\n\r\n  return map(grouped, value => {\r\n    const sorted = sortBy(value, \"stage\");\r\n    return {\r\n      size: value[0].value || 0,\r\n      sequence: value[0].sequence,\r\n      nodes: map(sorted, i => i.node),\r\n    };\r\n  });\r\n}\r\n\r\nfunction buildNodesFromTableData(data: any) {\r\n  const validKey = (key: any) => key !== \"value\";\r\n  const dataKeys = sortBy(filter(keys(data[0]), validKey), identity);\r\n\r\n  return map(data, (row, sequence) => ({\r\n    size: row.value || 0,\r\n    sequence,\r\n    nodes: compact(map(dataKeys, key => row[key])),\r\n  }));\r\n}\r\n\r\nfunction isDataInHierarchyFormat(data: any) {\r\n  const firstRow = first(data);\r\n  return every([\"sequence\", \"stage\", \"node\", \"value\"], field => has(firstRow, field));\r\n}\r\n\r\nfunction buildHierarchy(data: any) {\r\n  data = isDataInHierarchyFormat(data) ? buildNodesFromHierarchyData(data) : buildNodesFromTableData(data);\r\n\r\n  // build tree\r\n  const root = {\r\n    name: \"root\",\r\n    children: [],\r\n  };\r\n\r\n  data.forEach((d: any) => {\r\n    const nodes = d.nodes;\r\n    const size = parseInt(d.size, 10);\r\n\r\n    // build graph, nodes, and child nodes\r\n    let currentNode = root;\r\n    for (let j = 0; j < nodes.length; j += 1) {\r\n      let children = currentNode.children;\r\n      const nodeName = nodes[j];\r\n      const isLeaf = j + 1 === nodes.length;\r\n\r\n      if (!children) {\r\n        currentNode.children = children = [];\r\n        children.push({\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\r\n          name: exitNode,\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\r\n          size: currentNode.size,\r\n        });\r\n      }\r\n\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'name' does not exist on type 'never'.\r\n      let childNode = find(children, child => child.name === nodeName);\r\n\r\n      if (isLeaf && childNode) {\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'children' does not exist on type 'never'... Remove this comment to see the full error message\r\n        childNode.children = childNode.children || [];\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'children' does not exist on type 'never'... Remove this comment to see the full error message\r\n        childNode.children.push({\r\n          name: exitNode,\r\n          size,\r\n        });\r\n      } else if (isLeaf) {\r\n        children.push({\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\r\n          name: nodeName,\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'number' is not assignable to type 'never'.\r\n          size,\r\n        });\r\n      } else {\r\n        if (!childNode) {\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '{ name: any; children: never[]; }' is not as... Remove this comment to see the full error message\r\n          childNode = {\r\n            name: nodeName,\r\n            children: [],\r\n          };\r\n          // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'undefined' is not assignable to ... Remove this comment to see the full error message\r\n          children.push(childNode);\r\n        }\r\n\r\n        // @ts-expect-error ts-migrate(2322) FIXME: Type 'undefined' is not assignable to type '{ name... Remove this comment to see the full error message\r\n        currentNode = childNode;\r\n      }\r\n    }\r\n  });\r\n\r\n  return root;\r\n}\r\n\r\nfunction isDataValid(data: any) {\r\n  return data && data.rows.length > 0;\r\n}\r\n\r\nexport default function initSunburst(data: any) {\r\n  if (!isDataValid(data)) {\r\n    return (element: any) => {\r\n      d3.select(element)\r\n        .selectAll(\"*\")\r\n        .remove();\r\n    };\r\n  }\r\n\r\n  data = buildHierarchy(data.rows);\r\n\r\n  return (element: any) => {\r\n    d3.select(element)\r\n      .selectAll(\"*\")\r\n      .remove();\r\n\r\n    // svg dimensions\r\n    const width = element.clientWidth;\r\n    const height = element.offsetHeight;\r\n\r\n    // Breadcrumb dimensions: width, height, spacing, width of tip/tail.\r\n    const b = {\r\n      w: width / 6,\r\n      h: 30,\r\n      s: 3,\r\n      t: 10,\r\n    };\r\n\r\n    const radius = Math.min(width - b.h, height - b.h) / 2 - 5;\r\n    if (radius <= 0) {\r\n      return;\r\n    }\r\n\r\n    // margins\r\n    const margin = {\r\n      top: radius,\r\n      bottom: 50,\r\n      left: radius,\r\n      right: 0,\r\n    };\r\n\r\n    // Drawing variables: e.g. colors, totalSize, partitions, arcs\r\n\r\n    // Total size of all nodes, to be used later when data is loaded\r\n    let totalSize = 0;\r\n\r\n    // create d3.layout.partition\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'layout' does not exist on type 'typeof i... Remove this comment to see the full error message\r\n    const partition = d3.layout\r\n      .partition()\r\n      .size([2 * Math.PI, radius * radius])\r\n      .value((d: any) => d.size);\r\n\r\n    // create arcs for drawing D3 paths\r\n    const arc = d3.svg\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'arc' does not exist on type '(url: strin... Remove this comment to see the full error message\r\n      .arc()\r\n      .startAngle((d: any) => d.x)\r\n      .endAngle((d: any) => d.x + d.dx)\r\n      .innerRadius((d: any) => Math.sqrt(d.y))\r\n      .outerRadius((d: any) => Math.sqrt(d.y + d.dy));\r\n\r\n    /**\r\n     * Define and initialize D3 select references and div-containers\r\n     *\r\n     * e.g. vis, breadcrumbs, lastCrumb, summary, sunburst, legend\r\n     */\r\n    const vis = d3.select(element);\r\n\r\n    // create and position breadcrumbs container and svg\r\n    const breadcrumbs = vis\r\n      .append(\"div\")\r\n      .classed(\"breadcrumbs-container\", true)\r\n      .append(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", b.h)\r\n      .attr(\"fill\", \"white\")\r\n      .attr(\"font-weight\", 600);\r\n\r\n    // create and position SVG\r\n    const container = vis.append(\"div\");\r\n\r\n    // create and position summary container\r\n    const summary = container.append(\"div\").classed(\"summary-container\", true);\r\n\r\n    const sunburst = container\r\n      .append(\"div\")\r\n      .classed(\"sunburst-container\", true)\r\n      .append(\"svg\")\r\n      .attr(\"width\", radius * 2)\r\n      .attr(\"height\", radius * 2)\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n    // create last breadcrumb element\r\n    const lastCrumb = breadcrumbs.append(\"text\").classed(\"lastCrumb\", true);\r\n\r\n    // Generate a string representation for drawing a breadcrumb polygon.\r\n    function breadcrumbPoints(d: any, i: any) {\r\n      const points = [];\r\n      points.push(\"0,0\");\r\n      points.push(`${b.w},0`);\r\n      points.push(`${b.w + b.t},${b.h / 2}`);\r\n      points.push(`${b.w},${b.h}`);\r\n      points.push(`0,${b.h}`);\r\n\r\n      if (i > 0) {\r\n        // Leftmost breadcrumb; don't include 6th vertex.\r\n        points.push(`${b.t},${b.h / 2}`);\r\n      }\r\n      return points.join(\" \");\r\n    }\r\n\r\n    // Update the breadcrumb breadcrumbs to show the current sequence and percentage.\r\n    function updateBreadcrumbs(ancestors: any, percentageString: any) {\r\n      // Data join, where primary key = name + depth.\r\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n      const g = breadcrumbs.selectAll(\"g\").data(ancestors, d => d.name + d.depth);\r\n\r\n      // Add breadcrumb and label for entering nodes.\r\n      const breadcrumb = g.enter().append(\"g\");\r\n\r\n      breadcrumb\r\n        .append(\"polygon\")\r\n        .classed(\"breadcrumbs-shape\", true)\r\n        .attr(\"points\", breadcrumbPoints)\r\n        .attr(\"fill\", colorMap);\r\n\r\n      breadcrumb\r\n        .append(\"text\")\r\n        .classed(\"breadcrumbs-text\", true)\r\n        .attr(\"x\", (b.w + b.t) / 2)\r\n        .attr(\"y\", b.h / 2)\r\n        .attr(\"dy\", \"0.35em\")\r\n        .attr(\"font-size\", \"10px\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n        // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n        .text(d => d.name);\r\n\r\n      // Set position for entering and updating nodes.\r\n      g.attr(\"transform\", (d, i) => `translate(${i * (b.w + b.s)}, 0)`);\r\n\r\n      // Remove exiting nodes.\r\n      g.exit().remove();\r\n\r\n      // Update percentage at the lastCrumb.\r\n      lastCrumb\r\n        .attr(\"x\", (ancestors.length + 0.5) * (b.w + b.s))\r\n        .attr(\"y\", b.h / 2)\r\n        .attr(\"dy\", \"0.35em\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"fill\", \"black\")\r\n        .attr(\"font-weight\", 600)\r\n        .text(percentageString);\r\n    }\r\n\r\n    // helper function mouseover to handle mouseover events/animations and calculation\r\n    // of ancestor nodes etc\r\n    function mouseover(d: any) {\r\n      // build percentage string\r\n      const percentage = ((100 * d.value) / totalSize).toPrecision(3);\r\n      let percentageString = `${percentage}%`;\r\n      // @ts-expect-error ts-migrate(2365) FIXME: Operator '<' cannot be applied to types 'string' a... Remove this comment to see the full error message\r\n      if (percentage < 1) {\r\n        percentageString = \"< 1.0%\";\r\n      }\r\n\r\n      // update breadcrumbs (get all ancestors)\r\n      const ancestors = getAncestors(d);\r\n      updateBreadcrumbs(ancestors, percentageString);\r\n\r\n      // update sunburst (Fade all the segments and highlight only ancestors of current segment)\r\n      sunburst.selectAll(\"path\").attr(\"opacity\", 0.3);\r\n      sunburst\r\n        .selectAll(\"path\")\r\n        .filter(node => ancestors.indexOf(node) >= 0)\r\n        .attr(\"opacity\", 1);\r\n\r\n      // update summary\r\n      summary.html(`\r\n      <span>Stage: ${d.depth}</span>\r\n      <span class='percentage' style='font-size: 2em;'>${percentageString}</span>\r\n      <span>${d.value} of ${totalSize}</span>\r\n    `);\r\n\r\n      // display summary and breadcrumbs if hidden\r\n      summary.style(\"visibility\", \"\");\r\n      breadcrumbs.style(\"visibility\", \"\");\r\n    }\r\n\r\n    // helper function click to handle mouseleave events/animations\r\n    function click() {\r\n      // Deactivate all segments then retransition each segment to full opacity.\r\n      sunburst.selectAll(\"path\").on(\"mouseover\", null);\r\n      sunburst\r\n        .selectAll(\"path\")\r\n        .transition()\r\n        .duration(1000)\r\n        .attr(\"opacity\", 1)\r\n        // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 2.\r\n        .each(\"end\", function endClick() {\r\n          // @ts-expect-error ts-migrate(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message\r\n          d3.select(this).on(\"mouseover\", mouseover);\r\n        });\r\n\r\n      // hide summary and breadcrumbs if visible\r\n      breadcrumbs.style(\"visibility\", \"hidden\");\r\n      summary.style(\"visibility\", \"hidden\");\r\n    }\r\n\r\n    // Build only nodes of a threshold \"visible\" sizes to improve efficiency\r\n    // 0.005 radians = 0.29 degrees\r\n    const nodes = partition.nodes(data).filter((d: any) => d.dx > 0.005 && d.name !== exitNode);\r\n\r\n    // this section is required to update the colors.domain() every time the data updates\r\n    const uniqueNames = (function uniqueNames(a) {\r\n      const output: any = [];\r\n      a.forEach((d: any) => {\r\n        if (output.indexOf(d.name) === -1) output.push(d.name);\r\n      });\r\n      return output;\r\n    })(nodes);\r\n    colors.domain(uniqueNames); // update domain colors\r\n\r\n    // create path based on nodes\r\n    const path = sunburst\r\n      .data([data])\r\n      .selectAll(\"path\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"path\")\r\n      .classed(\"nodePath\", true)\r\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\r\n      .attr(\"display\", d => (d.depth ? null : \"none\"))\r\n      .attr(\"d\", arc)\r\n      .attr(\"fill\", colorMap)\r\n      .attr(\"opacity\", 1)\r\n      .attr(\"stroke\", \"white\")\r\n      .on(\"mouseover\", mouseover);\r\n\r\n    // // trigger mouse click over sunburst to reset visualization summary\r\n    vis.on(\"click\", click);\r\n\r\n    // Update totalSize of the tree = value of root node from partition.\r\n    // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\r\n    totalSize = path.node().__data__.value;\r\n  };\r\n}\r\n"],"file":"initSunburst.js"}