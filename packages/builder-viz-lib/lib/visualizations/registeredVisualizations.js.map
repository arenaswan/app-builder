{"version":3,"sources":["../../src/visualizations/registeredVisualizations.ts"],"names":["VisualizationConfig","PropTypes","shape","type","string","isRequired","name","getOptions","func","isDefault","bool","isDeprecated","Renderer","Editor","autoHeight","defaultRows","number","defaultColumns","minRows","maxRows","minColumns","maxColumns","registeredVisualizations","validateVisualizationConfig","config","typeSpecs","values","checkPropTypes","registerVisualization","Error","boxPlotVisualization","chartVisualization","choroplethVisualization","cohortVisualization","counterVisualization","detailsVisualization","funnelVisualization","mapVisualization","pivotVisualization","sankeyVisualization","sunburstVisualization","tableVisualization","wordCloudVisualization","getDefaultVisualization","visualization","newVisualization","options","description"],"mappings":"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","sourcesContent":["import { find, flatten, each } from \"lodash\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport boxPlotVisualization from \"./box-plot\";\r\nimport chartVisualization from \"./chart\";\r\nimport choroplethVisualization from \"./choropleth\";\r\nimport cohortVisualization from \"./cohort\";\r\nimport counterVisualization from \"./counter\";\r\nimport detailsVisualization from \"./details\";\r\nimport funnelVisualization from \"./funnel\";\r\nimport mapVisualization from \"./map\";\r\nimport pivotVisualization from \"./pivot\";\r\nimport sankeyVisualization from \"./sankey\";\r\nimport sunburstVisualization from \"./sunburst\";\r\nimport tableVisualization from \"./table\";\r\nimport wordCloudVisualization from \"./word-cloud\";\r\n\r\ntype VisualizationConfig = {\r\n  type: string;\r\n  name: string;\r\n  getOptions: (...args: any[]) => any;\r\n  isDefault?: boolean;\r\n  isDeprecated?: boolean;\r\n  Renderer: (...args: any[]) => any;\r\n  Editor?: (...args: any[]) => any;\r\n  autoHeight?: boolean;\r\n  defaultRows?: number;\r\n  defaultColumns?: number;\r\n  minRows?: number;\r\n  maxRows?: number;\r\n  minColumns?: number;\r\n  maxColumns?: number;\r\n};\r\n\r\n// @ts-expect-error ts-migrate(2322) FIXME: Type 'Requireable<InferProps<{ type: Validator<str... Remove this comment to see the full error message\r\nconst VisualizationConfig: PropTypes.Requireable<VisualizationConfig> = PropTypes.shape({\r\n  type: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  getOptions: PropTypes.func.isRequired,\r\n  isDefault: PropTypes.bool,\r\n  isDeprecated: PropTypes.bool,\r\n  Renderer: PropTypes.func.isRequired,\r\n  Editor: PropTypes.func,\r\n  // other config options\r\n  autoHeight: PropTypes.bool,\r\n  defaultRows: PropTypes.number,\r\n  defaultColumns: PropTypes.number,\r\n  minRows: PropTypes.number,\r\n  maxRows: PropTypes.number,\r\n  minColumns: PropTypes.number,\r\n  maxColumns: PropTypes.number,\r\n});\r\n\r\nconst registeredVisualizations = {};\r\n\r\nfunction validateVisualizationConfig(config: any) {\r\n  const typeSpecs = { config: VisualizationConfig };\r\n  const values = { config };\r\n  PropTypes.checkPropTypes(typeSpecs, values, \"prop\", \"registerVisualization\");\r\n}\r\n\r\nfunction registerVisualization(config: any) {\r\n  validateVisualizationConfig(config);\r\n  config = {\r\n    Editor: () => null,\r\n    ...config,\r\n    isDefault: config.isDefault && !config.isDeprecated,\r\n  };\r\n\r\n  // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n  if (registeredVisualizations[config.type]) {\r\n    throw new Error(`Visualization ${config.type} already registered.`);\r\n  }\r\n\r\n  // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n  registeredVisualizations[config.type] = config;\r\n}\r\n\r\neach(\r\n  flatten([\r\n    boxPlotVisualization,\r\n    chartVisualization,\r\n    choroplethVisualization,\r\n    cohortVisualization,\r\n    counterVisualization,\r\n    detailsVisualization,\r\n    funnelVisualization,\r\n    mapVisualization,\r\n    pivotVisualization,\r\n    sankeyVisualization,\r\n    sunburstVisualization,\r\n    tableVisualization,\r\n    wordCloudVisualization,\r\n  ]),\r\n  registerVisualization\r\n);\r\n\r\nexport default registeredVisualizations;\r\n\r\nexport function getDefaultVisualization() {\r\n  // return any visualization explicitly marked as default, or any non-deprecated otherwise\r\n  return (\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'isDefault' does not exist on type 'never... Remove this comment to see the full error message\r\n    find(registeredVisualizations, visualization => visualization.isDefault) ||\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'isDeprecated' does not exist on type 'ne... Remove this comment to see the full error message\r\n    find(registeredVisualizations, visualization => !visualization.isDeprecated)\r\n  );\r\n}\r\n\r\nexport function newVisualization(type = null, options = {}) {\r\n  // @ts-expect-error ts-migrate(2538) FIXME: Type 'null' cannot be used as an index type.\r\n  const visualization = type ? registeredVisualizations[type] : getDefaultVisualization();\r\n  return {\r\n    type: visualization.type,\r\n    name: visualization.name,\r\n    description: \"\",\r\n    options,\r\n  };\r\n}\r\n"],"file":"registeredVisualizations.js"}