{"version":3,"sources":["../../../../src/visualizations/choropleth/Editor/GeneralSettings.tsx"],"names":["GeneralSettings","options","data","onOptionsChange","mapType","geoJson","isLoadingGeoJson","geoJsonFields","targetFields","targetField","isString","fieldNames","visualizationsSettings","handleMapChange","choroplethAvailableMaps","_","columns","length","keyColumn","name","field","valueColumn","propTypes","EditorPropTypes"],"mappings":"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","sourcesContent":["import { isString, map, filter, get } from \"lodash\";\r\nimport React, { useMemo, useCallback } from \"react\";\r\nimport * as Grid from \"antd/lib/grid\";\r\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\r\nimport { Section, Select } from \"@/components/visualizations/editor\";\r\nimport { visualizationsSettings } from \"@/visualizations/visualizationsSettings\";\r\n\r\nimport useLoadGeoJson from \"../hooks/useLoadGeoJson\";\r\nimport { getGeoJsonFields } from \"./utils\";\r\n\r\nexport default function GeneralSettings({ options, data, onOptionsChange }: any) {\r\n  const [geoJson, isLoadingGeoJson] = useLoadGeoJson(options.mapType);\r\n  const geoJsonFields = useMemo(() => getGeoJsonFields(geoJson), [geoJson]);\r\n\r\n  // While geoJson is loading - show last selected field in select\r\n  const targetFields = isLoadingGeoJson ? filter([options.targetField], isString) : geoJsonFields;\r\n\r\n  const fieldNames = get(visualizationsSettings, `choroplethAvailableMaps.${options.mapType}.fieldNames`, {});\r\n\r\n  const handleMapChange = useCallback(\r\n    mapType => {\r\n      onOptionsChange({ mapType: mapType || null });\r\n    },\r\n    [onOptionsChange]\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Select\r\n          label=\"Map\"\r\n          data-test=\"Choropleth.Editor.MapType\"\r\n          defaultValue={options.mapType}\r\n          onChange={handleMapChange}>\r\n          {map(visualizationsSettings.choroplethAvailableMaps, (_, mapType) => (\r\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\r\n            <Select.Option key={mapType} data-test={`Choropleth.Editor.MapType.${mapType}`}>\r\n              {get(visualizationsSettings, `choroplethAvailableMaps.${mapType}.name`, mapType)}\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Grid.Row gutter={15}>\r\n          <Grid.Col span={12}>\r\n            <Select\r\n              label=\"Key Column\"\r\n              className=\"w-100\"\r\n              data-test=\"Choropleth.Editor.KeyColumn\"\r\n              disabled={data.columns.length === 0}\r\n              defaultValue={options.keyColumn}\r\n              onChange={(keyColumn: any) => onOptionsChange({ keyColumn })}>\r\n              {map(data.columns, ({ name }) => (\r\n                // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\r\n                <Select.Option key={name} data-test={`Choropleth.Editor.KeyColumn.${name}`}>\r\n                  {name}\r\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Grid.Col>\r\n          <Grid.Col span={12}>\r\n            <Select\r\n              label=\"Target Field\"\r\n              className=\"w-100\"\r\n              data-test=\"Choropleth.Editor.TargetField\"\r\n              disabled={isLoadingGeoJson || targetFields.length === 0}\r\n              loading={isLoadingGeoJson}\r\n              value={options.targetField}\r\n              onChange={(targetField: any) => onOptionsChange({ targetField })}>\r\n              {map(targetFields, field => (\r\n                // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\r\n                <Select.Option key={field} data-test={`Choropleth.Editor.TargetField.${field}`}>\r\n                  {fieldNames[field] || field}\r\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Grid.Col>\r\n        </Grid.Row>\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Select\r\n          label=\"Value Column\"\r\n          data-test=\"Choropleth.Editor.ValueColumn\"\r\n          disabled={data.columns.length === 0}\r\n          defaultValue={options.valueColumn}\r\n          onChange={(valueColumn: any) => onOptionsChange({ valueColumn })}>\r\n          {map(data.columns, ({ name }) => (\r\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\r\n            <Select.Option key={name} data-test={`Choropleth.Editor.ValueColumn.${name}`}>\r\n              {name}\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </Section>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nGeneralSettings.propTypes = EditorPropTypes;\r\n"],"file":"GeneralSettings.js"}