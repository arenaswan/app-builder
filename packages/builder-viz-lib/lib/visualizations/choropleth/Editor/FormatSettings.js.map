{"version":3,"sources":["../../../../src/visualizations/choropleth/Editor/FormatSettings.tsx"],"names":["TemplateFormatHint","geoJsonProperties","paddingBottom","length","maxHeight","overflow","property","defaultProps","GeneralSettings","options","onOptionsChange","onOptionsChangeDebounced","mapType","geoJson","geoJsonFields","templateFormatHint","valueFormat","event","target","value","noValuePlaceholder","legend","visible","checked","position","alignText","tooltip","enabled","template","popup","propTypes","EditorPropTypes"],"mappings":"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","sourcesContent":["import { map } from \"lodash\";\r\nimport React, { useMemo } from \"react\";\r\nimport { useDebouncedCallback } from \"use-debounce\";\r\nimport * as Grid from \"antd/lib/grid\";\r\nimport {\r\n  Section,\r\n  Select,\r\n  Input,\r\n  Checkbox,\r\n  TextArea,\r\n  TextAlignmentSelect,\r\n  ContextHelp,\r\n} from \"@/components/visualizations/editor\";\r\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\r\n\r\nimport useLoadGeoJson from \"../hooks/useLoadGeoJson\";\r\nimport { getGeoJsonFields } from \"./utils\";\r\n\r\ntype OwnTemplateFormatHintProps = {\r\n  geoJsonProperties?: string[];\r\n};\r\n\r\ntype TemplateFormatHintProps = OwnTemplateFormatHintProps & typeof TemplateFormatHint.defaultProps;\r\n\r\nfunction TemplateFormatHint({ geoJsonProperties }: TemplateFormatHintProps) {\r\n  return (\r\n    // @ts-expect-error ts-migrate(2746) FIXME: This JSX tag's 'children' prop expects a single ch... Remove this comment to see the full error message\r\n    <ContextHelp placement=\"topLeft\" arrowPointAtCenter>\r\n      <div style={{ paddingBottom: 5 }}>\r\n        <div>\r\n          All query result columns can be referenced using <code>{\"{{ column_name }}\"}</code> syntax.\r\n        </div>\r\n        <div>\r\n          Use <code>{\"{{ @@value }}\"}</code> to access formatted value.\r\n        </div>\r\n      </div>\r\n      {geoJsonProperties.length > 0 && (\r\n        <React.Fragment>\r\n          <div className=\"p-b-5\">GeoJSON properties could be accessed by these names:</div>\r\n          <div style={{ maxHeight: 300, overflow: \"auto\" }}>\r\n            {map(geoJsonProperties, property => (\r\n              <div key={property}>\r\n                <code>{`{{ @@${property}}}`}</code>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </ContextHelp>\r\n  );\r\n}\r\n\r\nTemplateFormatHint.defaultProps = {\r\n  geoJsonProperties: [],\r\n};\r\n\r\nexport default function GeneralSettings({ options, onOptionsChange }: any) {\r\n  const [onOptionsChangeDebounced] = useDebouncedCallback(onOptionsChange, 200);\r\n  const [geoJson] = useLoadGeoJson(options.mapType);\r\n  const geoJsonFields = useMemo(() => getGeoJsonFields(geoJson), [geoJson]);\r\n\r\n  const templateFormatHint = <TemplateFormatHint geoJsonProperties={geoJsonFields} />;\r\n\r\n  return (\r\n    <div className=\"choropleth-visualization-editor-format-settings\">\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Grid.Row gutter={15}>\r\n          <Grid.Col span={12}>\r\n            <Input\r\n              label={\r\n                <React.Fragment>\r\n                  Value Format\r\n                  <ContextHelp.NumberFormatSpecs />\r\n                </React.Fragment>\r\n              }\r\n              data-test=\"Choropleth.Editor.ValueFormat\"\r\n              defaultValue={options.valueFormat}\r\n              onChange={(event: any) => onOptionsChangeDebounced({ valueFormat: event.target.value })}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={12}>\r\n            <Input\r\n              label=\"Value Placeholder\"\r\n              data-test=\"Choropleth.Editor.ValuePlaceholder\"\r\n              defaultValue={options.noValuePlaceholder}\r\n              onChange={(event: any) => onOptionsChangeDebounced({ noValuePlaceholder: event.target.value })}\r\n            />\r\n          </Grid.Col>\r\n        </Grid.Row>\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Checkbox\r\n          data-test=\"Choropleth.Editor.LegendVisibility\"\r\n          checked={options.legend.visible}\r\n          onChange={event => onOptionsChange({ legend: { visible: event.target.checked } })}>\r\n          Show Legend\r\n        </Checkbox>\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Grid.Row gutter={15}>\r\n          <Grid.Col span={12}>\r\n            <Select\r\n              label=\"Legend Position\"\r\n              data-test=\"Choropleth.Editor.LegendPosition\"\r\n              disabled={!options.legend.visible}\r\n              defaultValue={options.legend.position}\r\n              onChange={(position: any) => onOptionsChange({ legend: { position } })}>\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              <Select.Option value=\"top-left\" data-test=\"Choropleth.Editor.LegendPosition.TopLeft\">\r\n                top / left\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              </Select.Option>\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              <Select.Option value=\"top-right\" data-test=\"Choropleth.Editor.LegendPosition.TopRight\">\r\n                top / right\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              </Select.Option>\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              <Select.Option value=\"bottom-left\" data-test=\"Choropleth.Editor.LegendPosition.BottomLeft\">\r\n                bottom / left\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              </Select.Option>\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              <Select.Option value=\"bottom-right\" data-test=\"Choropleth.Editor.LegendPosition.BottomRight\">\r\n                bottom / right\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              </Select.Option>\r\n            </Select>\r\n          </Grid.Col>\r\n          <Grid.Col span={12}>\r\n            <TextAlignmentSelect\r\n              data-test=\"Choropleth.Editor.LegendTextAlignment\"\r\n              label=\"Legend Text Alignment\"\r\n              disabled={!options.legend.visible}\r\n              defaultValue={options.legend.alignText}\r\n              onChange={(event: any) => onOptionsChange({ legend: { alignText: event.target.value } })}\r\n            />\r\n          </Grid.Col>\r\n        </Grid.Row>\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Checkbox\r\n          data-test=\"Choropleth.Editor.TooltipEnabled\"\r\n          checked={options.tooltip.enabled}\r\n          onChange={event => onOptionsChange({ tooltip: { enabled: event.target.checked } })}>\r\n          Show Tooltip\r\n        </Checkbox>\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Input\r\n          label={<React.Fragment>Tooltip Template {templateFormatHint}</React.Fragment>}\r\n          data-test=\"Choropleth.Editor.TooltipTemplate\"\r\n          disabled={!options.tooltip.enabled}\r\n          defaultValue={options.tooltip.template}\r\n          onChange={(event: any) => onOptionsChangeDebounced({ tooltip: { template: event.target.value } })}\r\n        />\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Checkbox\r\n          data-test=\"Choropleth.Editor.PopupEnabled\"\r\n          checked={options.popup.enabled}\r\n          onChange={event => onOptionsChange({ popup: { enabled: event.target.checked } })}>\r\n          Show Popup\r\n        </Checkbox>\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <TextArea\r\n          label={<React.Fragment>Popup Template {templateFormatHint}</React.Fragment>}\r\n          data-test=\"Choropleth.Editor.PopupTemplate\"\r\n          disabled={!options.popup.enabled}\r\n          rows={4}\r\n          defaultValue={options.popup.template}\r\n          onChange={(event: any) => onOptionsChangeDebounced({ popup: { template: event.target.value } })}\r\n        />\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n\r\nGeneralSettings.propTypes = EditorPropTypes;\r\n"],"file":"FormatSettings.js"}