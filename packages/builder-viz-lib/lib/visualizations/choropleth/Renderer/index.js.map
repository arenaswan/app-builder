{"version":3,"sources":["../../../../src/visualizations/choropleth/Renderer/index.tsx"],"names":["Renderer","data","options","onOptionsChange","container","setContainer","mapType","geoJson","onBoundsChangeRef","current","bounds","noop","optionsWithoutBounds","map","setMap","_map","destroy","updateLayers","rows","keyColumn","valueColumn","updateBounds","background","colors","propTypes","RendererPropTypes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEe,SAASA,QAAT,OAA2D;AAAA,MAAvCC,IAAuC,QAAvCA,IAAuC;AAAA,MAAjCC,OAAiC,QAAjCA,OAAiC;AAAA,MAAxBC,eAAwB,QAAxBA,eAAwB;;AAAA,kBACtC,qBAAS,IAAT,CADsC;AAAA;AAAA,MACjEC,SADiE;AAAA,MACtDC,YADsD;;AAAA,wBAEtD,8BAAeH,OAAO,CAACI,OAAvB,CAFsD;AAAA;AAAA,MAEjEC,OAFiE;;AAGxE,MAAMC,iBAAiB,GAAG,oBAA1B,CAHwE,CAIxE;;AACAA,EAAAA,iBAAiB,CAACC,OAAlB,GAA4BN,eAAe,GAAIO,MAAD,IAAiBP,eAAe,mBAAMD,OAAN;AAAeQ,IAAAA;AAAf,KAAnC,GAA8DC,YAAzG;AAEA,MAAMC,oBAAoB,GAAG,qCAAuB,MAAM,kBAAKV,OAAL,EAAc,CAAC,QAAD,CAAd,CAA7B,EAAwD,CAACA,OAAD,CAAxD,CAA7B;;AAPwE,mBASlD,qBAAS,IAAT,CATkD;AAAA;AAAA,MASjEW,GATiE;AAAA,MAS5DC,MAT4D;;AAWxE,wBAAU,MAAM;AACd,QAAIV,SAAJ,EAAe;AACb;AACA,UAAMW,IAAI,GAAG,6BAAeX,SAAf,EAA0B;AAAA,eAAaI,iBAAiB,CAACC,OAAlB,CAA0B,YAA1B,CAAb;AAAA,OAA1B,CAAb,CAFa,CAGb;;;AACAK,MAAAA,MAAM,CAACC,IAAD,CAAN;AACA,aAAO,MAAM;AACXA,QAAAA,IAAI,CAACC,OAAL;AACD,OAFD;AAGD;AACF,GAVD,EAUG,CAACZ,SAAD,CAVH;AAYA,wBAAU,MAAM;AACd,QAAIS,GAAJ,EAAS;AACP;AACAA,MAAAA,GAAG,CAACI,YAAJ,CACEV,OADF,EAEE;AACA,8BAAYN,IAAI,CAACiB,IAAjB,EAAuBN,oBAAoB,CAACO,SAA5C,EAAuDP,oBAAoB,CAACQ,WAA5E,CAHF,EAIElB,OAJF,CAIU;AAJV;AAMD;AACF,GAVD,EAUG,CAACW,GAAD,EAAMN,OAAN,EAAeN,IAAI,CAACiB,IAApB,EAA0BN,oBAA1B,CAVH,EAvBwE,CAiCnB;AAErD;;AACA,wBAAU,MAAM;AACd,QAAIC,GAAJ,EAAS;AACP;AACAA,MAAAA,GAAG,CAACQ,YAAJ,CAAiBnB,OAAO,CAACQ,MAAzB;AACD;AACF,GALD,EAKG,CAACG,GAAD,EAAMX,OAAN,EAAeC,eAAf,CALH;AAOA;AAAA;AACE;AACA;AAAK,MAAA,SAAS,EAAC,6BAAf;AAA6C,MAAA,KAAK,EAAE;AAAEmB,QAAAA,UAAU,EAAEpB,OAAO,CAACqB,MAAR,CAAeD;AAA7B,OAApD;AAA+F,MAAA,GAAG,EAAEjB;AAApG;AAFF;AAID;;AAEDL,QAAQ,CAACwB,SAAT,GAAqBC,4BAArB","sourcesContent":["import { omit, noop } from \"lodash\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { RendererPropTypes } from \"@/visualizations/prop-types\";\r\nimport useMemoWithDeepCompare from \"@/lib/hooks/useMemoWithDeepCompare\";\r\n\r\nimport useLoadGeoJson from \"../hooks/useLoadGeoJson\";\r\nimport initChoropleth from \"./initChoropleth\";\r\nimport { prepareData } from \"./utils\";\r\nimport \"./renderer.less\";\r\n\r\nexport default function Renderer({ data, options, onOptionsChange }: any) {\r\n  const [container, setContainer] = useState(null);\r\n  const [geoJson] = useLoadGeoJson(options.mapType);\r\n  const onBoundsChangeRef = useRef();\r\n  // @ts-expect-error ts-migrate(2322) FIXME: Type '(...args: any[]) => void' is not assignable ... Remove this comment to see the full error message\r\n  onBoundsChangeRef.current = onOptionsChange ? (bounds: any) => onOptionsChange({ ...options, bounds }) : noop;\r\n\r\n  const optionsWithoutBounds = useMemoWithDeepCompare(() => omit(options, [\"bounds\"]), [options]);\r\n\r\n  const [map, setMap] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (container) {\r\n      // @ts-expect-error ts-migrate(7019) FIXME: Rest parameter 'args' implicitly has an 'any[]' ty... Remove this comment to see the full error message\r\n      const _map = initChoropleth(container, (...args) => onBoundsChangeRef.current(...args));\r\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type '{ updateLayers: (geoJson: any, d... Remove this comment to see the full error message\r\n      setMap(_map);\r\n      return () => {\r\n        _map.destroy();\r\n      };\r\n    }\r\n  }, [container]);\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\r\n      map.updateLayers(\r\n        geoJson,\r\n        // @ts-expect-error ts-migrate(2532) FIXME: Object is possibly 'undefined'.\r\n        prepareData(data.rows, optionsWithoutBounds.keyColumn, optionsWithoutBounds.valueColumn),\r\n        options // detect changes for all options except bounds, but pass them all!\r\n      );\r\n    }\r\n  }, [map, geoJson, data.rows, optionsWithoutBounds]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // This may come only from editor\r\n  useEffect(() => {\r\n    if (map) {\r\n      // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\r\n      map.updateBounds(options.bounds);\r\n    }\r\n  }, [map, options, onOptionsChange]);\r\n\r\n  return (\r\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'Dispatch<SetStateAction<null>>' is not assig... Remove this comment to see the full error message\r\n    <div className=\"map-visualization-container\" style={{ background: options.colors.background }} ref={setContainer} />\r\n  );\r\n}\r\n\r\nRenderer.propTypes = RendererPropTypes;\r\n"],"file":"index.js"}