{"version":3,"sources":["../../../../src/visualizations/chart/Renderer/CustomPlotlyChart.tsx"],"names":["CustomPlotlyChart","options","data","container","setContainer","renderCustomChart","customCode","enableConsoleLogs","plotlyData","rows","unwatch","Plotly","purge","x","ys","propTypes","RendererPropTypes"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;AAEe,SAASA,iBAAT,OAAmD;AAAA,MAAtBC,OAAsB,QAAtBA,OAAsB;AAAA,MAAbC,IAAa,QAAbA,IAAa;;AAAA,kBAC9B,qBAAS,IAAT,CAD8B;AAAA;AAAA,MACzDC,SADyD;AAAA,MAC9CC,YAD8C;;AAGhE,MAAMC,iBAAiB,GAAG,oBAAQ,MAAM,uCAA0BJ,OAAO,CAACK,UAAlC,EAA8CL,OAAO,CAACM,iBAAtD,CAAd,EAAwF,CAChHN,OAAO,CAACK,UADwG,EAEhHL,OAAO,CAACM,iBAFwG,CAAxF,CAA1B;AAKA,MAAMC,UAAU,GAAG,oBAAQ,MAAM,oCAAuB,2BAAaN,IAAI,CAACO,IAAlB,EAAwBR,OAAxB,CAAvB,CAAd,EAAwE,CAACA,OAAD,EAAUC,IAAV,CAAxE,CAAnB;AAEA,wBAAU,MAAM;AACd,QAAIC,SAAJ,EAAe;AACb,UAAMO,OAAO,GAAG,6BAAeP,SAAf,EAA0B,MAAM;AAC9C;AACA;AACAQ,uBAAOC,KAAP,CAAaT,SAAb;;AACAE,QAAAA,iBAAiB,CAACG,UAAU,CAACK,CAAZ,EAAeL,UAAU,CAACM,EAA1B,EAA8BX,SAA9B,EAAyCQ,cAAzC,CAAjB;AACD,OALe,CAAhB;AAMA,aAAOD,OAAP;AACD;AACF,GAVD,EAUG,CAACP,SAAD,EAAYK,UAAZ,EAAwBH,iBAAxB,CAVH,EAVgE,CAsBhE;;AACA,wBAAU,MAAM;AACd,QAAIF,SAAJ,EAAe;AACb;AACA,aAAO,MAAMQ,eAAOC,KAAP,CAAaT,SAAb,CAAb;AACD;AACF,GALD,EAKG,CAACA,SAAD,CALH,EAvBgE,CA8BhE;;AACA,sBAAO;AAAK,IAAA,SAAS,EAAC,+BAAf;AAA+C,IAAA,GAAG,EAAEC;AAApD,IAAP;AACD;;AAEDJ,iBAAiB,CAACe,SAAlB,GAA8BC,4BAA9B","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { RendererPropTypes } from \"@/visualizations/prop-types\";\r\n\r\nimport resizeObserver from \"@/services/resizeObserver\";\r\n\r\nimport getChartData from \"../getChartData\";\r\nimport { Plotly, prepareCustomChartData, createCustomChartRenderer } from \"../plotly\";\r\n\r\nexport default function CustomPlotlyChart({ options, data }: any) {\r\n  const [container, setContainer] = useState(null);\r\n\r\n  const renderCustomChart = useMemo(() => createCustomChartRenderer(options.customCode, options.enableConsoleLogs), [\r\n    options.customCode,\r\n    options.enableConsoleLogs,\r\n  ]);\r\n\r\n  const plotlyData = useMemo(() => prepareCustomChartData(getChartData(data.rows, options)), [options, data]);\r\n\r\n  useEffect(() => {\r\n    if (container) {\r\n      const unwatch = resizeObserver(container, () => {\r\n        // Clear existing data with blank data for succeeding codeCall adds data to existing plot.\r\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'null' is not assignable to param... Remove this comment to see the full error message\r\n        Plotly.purge(container);\r\n        renderCustomChart(plotlyData.x, plotlyData.ys, container, Plotly);\r\n      });\r\n      return unwatch;\r\n    }\r\n  }, [container, plotlyData, renderCustomChart]);\r\n\r\n  // Cleanup when component destroyed\r\n  useEffect(() => {\r\n    if (container) {\r\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'null' is not assignable to param... Remove this comment to see the full error message\r\n      return () => Plotly.purge(container);\r\n    }\r\n  }, [container]);\r\n\r\n  // @ts-expect-error ts-migrate(2322) FIXME: Type 'Dispatch<SetStateAction<null>>' is not assig... Remove this comment to see the full error message\r\n  return <div className=\"chart-visualization-container\" ref={setContainer} />;\r\n}\r\n\r\nCustomPlotlyChart.propTypes = RendererPropTypes;\r\n"],"file":"CustomPlotlyChart.js"}