{"version":3,"sources":["../../../../src/visualizations/chart/Editor/DataLabelsSettings.test.tsx"],"names":["findByTestID","wrapper","testId","find","mount","options","done","enzyme","columns","rows","changedOptions","expect","toMatchSnapshot","describe","test","el","globalSeriesType","showDataLabels","last","simulate","target","checked","numberFormat","value","percentFormat","dateTimeFormat","textFormat"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport enzyme from \"enzyme\";\r\n\r\nimport getOptions from \"../getOptions\";\r\nimport DataLabelsSettings from \"./DataLabelsSettings\";\r\n\r\nfunction findByTestID(wrapper: any, testId: any) {\r\n  return wrapper.find(`[data-test=\"${testId}\"]`);\r\n}\r\n\r\nfunction mount(options: any, done: any) {\r\n  options = getOptions(options);\r\n  return enzyme.mount(\r\n    <DataLabelsSettings\r\n      visualizationName=\"Test\"\r\n      data={{ columns: [], rows: [] }}\r\n      options={options}\r\n      onOptionsChange={changedOptions => {\r\n        expect(changedOptions).toMatchSnapshot();\r\n        done();\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\ndescribe(\"Visualizations -> Chart -> Editor -> Data Labels Settings\", () => {\r\n  test(\"Sets Show Data Labels option\", done => {\r\n    const el = mount(\r\n      {\r\n        globalSeriesType: \"column\",\r\n        showDataLabels: false,\r\n      },\r\n      done\r\n    );\r\n\r\n    findByTestID(el, \"Chart.DataLabels.ShowDataLabels\")\r\n      .last()\r\n      .find(\"input\")\r\n      .simulate(\"change\", { target: { checked: true } });\r\n  });\r\n\r\n  test(\"Changes number format\", done => {\r\n    const el = mount(\r\n      {\r\n        globalSeriesType: \"column\",\r\n        numberFormat: \"0[.]0000\",\r\n      },\r\n      done\r\n    );\r\n\r\n    findByTestID(el, \"Chart.DataLabels.NumberFormat\")\r\n      .last()\r\n      .simulate(\"change\", { target: { value: \"0.00\" } });\r\n  });\r\n\r\n  test(\"Changes percent values format\", done => {\r\n    const el = mount(\r\n      {\r\n        globalSeriesType: \"column\",\r\n        percentFormat: \"0[.]00%\",\r\n      },\r\n      done\r\n    );\r\n\r\n    findByTestID(el, \"Chart.DataLabels.PercentFormat\")\r\n      .last()\r\n      .simulate(\"change\", { target: { value: \"0.0%\" } });\r\n  });\r\n\r\n  test(\"Changes date/time format\", done => {\r\n    const el = mount(\r\n      {\r\n        globalSeriesType: \"column\",\r\n        dateTimeFormat: \"YYYY-MM-DD HH:mm:ss\",\r\n      },\r\n      done\r\n    );\r\n\r\n    findByTestID(el, \"Chart.DataLabels.DateTimeFormat\")\r\n      .last()\r\n      .simulate(\"change\", { target: { value: \"YYYY MMM DD\" } });\r\n  });\r\n\r\n  test(\"Changes data labels format\", done => {\r\n    const el = mount(\r\n      {\r\n        globalSeriesType: \"column\",\r\n        textFormat: null,\r\n      },\r\n      done\r\n    );\r\n\r\n    findByTestID(el, \"Chart.DataLabels.TextFormat\")\r\n      .last()\r\n      .simulate(\"change\", { target: { value: \"{{ @@x }} :: {{ @@y }} / {{ @@yPercent }}\" } });\r\n  });\r\n});\r\n"],"file":"DataLabelsSettings.test.js"}