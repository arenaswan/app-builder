{"version":3,"sources":["../../../../src/visualizations/chart/Editor/GeneralSettings.tsx"],"names":["getAvailableColumnMappingTypes","options","result","globalSeriesType","push","seriesOptions","type","getMappedColumns","availableColumns","mappedColumns","availableTypes","ColumnMappingSelect","MappingTypes","multiple","c","name","usedColumns","columnMapping","column","unusedColumns","mappedColumnsToColumnMappings","value","v","GeneralSettings","data","onOptionsChange","columns","handleGlobalSeriesTypeChange","showDataLabels","swappedAxes","series","handleColumnMappingChange","UpdateOptionsStrategy","shallowMerge","handleLegendPlacementChange","legend","enabled","placement","handleAxesSwapping","yAxis","coefficient","sizemode","mode","direction","traceorder","showpoints","event","target","checked","stacking","percentValues","missingValuesAsZero","propTypes","EditorPropTypes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,SAASA,8BAAT,CAAwCC,OAAxC,EAAsD;AACpD,MAAMC,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,CAAf;;AAEA,MAAI,CAAC,sBAAS,CAAC,QAAD,EAAW,SAAX,CAAT,EAAgCD,OAAO,CAACE,gBAAxC,CAAL,EAAgE;AAC9DD,IAAAA,MAAM,CAACE,IAAP,CAAY,QAAZ;AACD;;AAED,MAAIH,OAAO,CAACE,gBAAR,KAA6B,QAA7B,IAAyC,kBAAKF,OAAO,CAACI,aAAb,EAA4B;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAA5B,CAA7C,EAA8F;AAC5FJ,IAAAA,MAAM,CAACE,IAAP,CAAY,MAAZ;AACD;;AAED,MAAIH,OAAO,CAACE,gBAAR,KAA6B,SAAjC,EAA4C;AAC1CD,IAAAA,MAAM,CAACE,IAAP,CAAY,MAAZ;AACD;;AAED,MAAI,CAAC,sBAAS,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CAAT,EAA0CH,OAAO,CAACE,gBAAlD,CAAL,EAA0E;AACxED,IAAAA,MAAM,CAACE,IAAP,CAAY,QAAZ;AACD;;AAED,SAAOF,MAAP;AACD;;AAED,SAASK,gBAAT,CAA0BN,OAA1B,EAAwCO,gBAAxC,EAA+D;AAC7D,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,cAAc,GAAGV,8BAA8B,CAACC,OAAD,CAArD;AACA,oBAAKS,cAAL,EAAqBJ,IAAI,IAAI;AAC3B;AACAG,IAAAA,aAAa,CAACH,IAAD,CAAb,GAAsBK,6BAAoBC,YAApB,CAAiCN,IAAjC,EAAuCO,QAAvC,GAAkD,EAAlD,GAAuD,IAA7E;AACD,GAHD;AAKAL,EAAAA,gBAAgB,GAAG,iBAAIA,gBAAJ,EAAsBM,CAAC,IAAIA,CAAC,CAACC,IAA7B,CAAnB;AACA,MAAMC,WAAgB,GAAG,EAAzB;AAEA,oBAAKf,OAAO,CAACgB,aAAb,EAA4B,CAACX,IAAD,EAAOY,MAAP,KAAkB;AAC5C,QAAI,sBAASV,gBAAT,EAA2BU,MAA3B,KAAsC,sBAASR,cAAT,EAAyBJ,IAAzB,CAA1C,EAA0E;AACxE;AADwE,UAEhEO,QAFgE,GAEnDF,6BAAoBC,YAApB,CAAiCN,IAAjC,CAFmD,CAEhEO,QAFgE;;AAGxE,UAAIA,QAAJ,EAAc;AACZ;AACAJ,QAAAA,aAAa,CAACH,IAAD,CAAb,CAAoBF,IAApB,CAAyBc,MAAzB;AACD,OAHD,MAGO;AACL;AACAT,QAAAA,aAAa,CAACH,IAAD,CAAb,GAAsBY,MAAtB;AACD;;AACDF,MAAAA,WAAW,CAACZ,IAAZ,CAAiBc,MAAjB;AACD;AACF,GAbD;AAeA,SAAO;AACLT,IAAAA,aADK;AAELU,IAAAA,aAAa,EAAE,wBAAWX,gBAAX,EAA6BQ,WAA7B;AAFV,GAAP;AAID;;AAED,SAASI,6BAAT,CAAuCX,aAAvC,EAA2D;AACzD,MAAMP,MAAM,GAAG,EAAf;AACA,oBAAKO,aAAL,EAAoB,CAACY,KAAD,EAAQf,IAAR,KAAiB;AACnC,QAAI,qBAAQe,KAAR,CAAJ,EAAoB;AAClB,wBAAKA,KAAL,EAAYC,CAAC,IAAI;AACf;AACApB,QAAAA,MAAM,CAACoB,CAAD,CAAN,GAAYhB,IAAZ;AACD,OAHD;AAID,KALD,MAKO;AACL,UAAIe,KAAJ,EAAW;AACT;AACAnB,QAAAA,MAAM,CAACmB,KAAD,CAAN,GAAgBf,IAAhB;AACD;AACF;AACF,GAZD;AAaA,SAAOJ,MAAP;AACD;;AAEc,SAASqB,eAAT,OAAkE;AAAA,MAAvCtB,OAAuC,QAAvCA,OAAuC;AAAA,MAA9BuB,IAA8B,QAA9BA,IAA8B;AAAA,MAAxBC,eAAwB,QAAxBA,eAAwB;;AAAA,iBACtC,oBAAQ,MAAMlB,gBAAgB,CAACN,OAAD,EAAUuB,IAAI,CAACE,OAAf,CAA9B,EAAuD,CAC9FzB,OAD8F,EAE9FuB,IAAI,CAACE,OAFyF,CAAvD,CADsC;AAAA,MACvEjB,aADuE,YACvEA,aADuE;AAAA,MACxDU,aADwD,YACxDA,aADwD;;AAM/E,WAASQ,4BAAT,CAAsCxB,gBAAtC,EAA6D;AAC3DsB,IAAAA,eAAe,CAAC;AACdtB,MAAAA,gBADc;AAEdyB,MAAAA,cAAc,EAAEzB,gBAAgB,KAAK,KAFvB;AAGd0B,MAAAA,WAAW,EAAE,KAHC;AAIdxB,MAAAA,aAAa,EAAE,uBAAUJ,OAAO,CAACI,aAAlB,EAAiCyB,MAAM,sBACjDA,MADiD;AAEpDxB,QAAAA,IAAI,EAAEH;AAF8C,QAAvC;AAJD,KAAD,CAAf;AASD;;AAED,WAAS4B,yBAAT,CAAmCb,MAAnC,EAAgDZ,IAAhD,EAA2D;AACzD,QAAMW,aAAa,GAAGG,6BAA6B,mBAC9CX,aAD8C;AAEjD,OAACH,IAAD,GAAQY;AAFyC,OAAnD;AAIAO,IAAAA,eAAe,CAAC;AAAER,MAAAA;AAAF,KAAD,EAAoBe,0CAAsBC,YAA1C,CAAf;AACD;;AAED,WAASC,2BAAT,CAAqCb,KAArC,EAAiD;AAC/C,QAAIA,KAAK,KAAK,QAAd,EAAwB;AACtBI,MAAAA,eAAe,CAAC;AAAEU,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAV,OAAD,CAAf;AACD,KAFD,MAEO;AACLX,MAAAA,eAAe,CAAC;AAAEU,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,SAAS,EAAEhB;AAA5B;AAAV,OAAD,CAAf;AACD;AACF;;AAED,WAASiB,kBAAT,GAA8B;AAC5B;AACA,QAAMjC,aAAa,GAAG,uBAAUJ,OAAO,CAACI,aAAlB,EAAiCyB,MAAM,sBACxDA,MADwD;AAE3DS,MAAAA,KAAK,EAAE;AAFoD,MAAvC,CAAtB;AAIAd,IAAAA,eAAe,CAAC;AAAEI,MAAAA,WAAW,EAAE,CAAC5B,OAAO,CAAC4B,WAAxB;AAAqCxB,MAAAA;AAArC,KAAD,CAAf;AACD;;AAED,sBACE,6BAAC,cAAD,CAAO,QAAP,qBAEE,6BAAC,eAAD,qBACE,6BAAC,wBAAD,CACE;AADF;AAEE,IAAA,KAAK,EAAC,YAFR;AAGE,iBAAU,wBAHZ;AAIE,IAAA,YAAY,EAAEJ,OAAO,CAACE,gBAJxB;AAKE,IAAA,QAAQ,EAAEwB;AALZ,IADF,CAFF,EAYG,sBAAS,CAAC,QAAD,EAAW,MAAX,EAAmB,KAAnB,CAAT,EAAoC1B,OAAO,CAACE,gBAA5C;AAAA;AACC;AACA,+BAAC,eAAD,qBACE,6BAAC,gBAAD;AACE,iBAAU,mBADZ;AAEE,IAAA,cAAc,EAAEF,OAAO,CAAC4B,WAF1B;AAGE,IAAA,OAAO,EAAE5B,OAAO,CAAC4B,WAHnB;AAIE,IAAA,QAAQ,EAAES;AAJZ,wBADF,CAdJ,EAyBG,iBAAI7B,aAAJ,EAAmB,CAACY,KAAD,EAAQf,IAAR,kBAClB,6BAAC,4BAAD,CACE;AADF;AAEE,IAAA,GAAG,EAAEA,IAFP,CAGE;AAHF;AAIE,IAAA,IAAI,EAAEA,IAJR;AAKE,IAAA,KAAK,EAAEe,KALT,CAME;AANF;AAOE,IAAA,cAAc,EAAEpB,OAAO,CAAC4B,WAP1B,CAQE;AARF;AASE,IAAA,gBAAgB,EAAEV,aATpB,CAUE;AAVF;AAWE,IAAA,QAAQ,EAAEY;AAXZ,IADD,CAzBH,EAyCG,sBAAS,CAAC,QAAD,CAAT,EAAqB9B,OAAO,CAACE,gBAA7B,kBACC,6BAAC,cAAD,CAAO,QAAP,qBAEE,6BAAC,eAAD,qBACE,6BAAC,mBAAD;AACE,IAAA,KAAK,EAAC,yBADR;AAEE,iBAAU,yBAFZ;AAGE,IAAA,YAAY,EAAEF,OAAO,CAACuC,WAHxB;AAIE,IAAA,QAAQ,EAAGnB,KAAD,IAAgBI,eAAe,CAAC;AAAEe,MAAAA,WAAW,EAAE,sBAASnB,KAAT;AAAf,KAAD;AAJ3C,IADF,CAFF,eAYE,6BAAC,eAAD,qBACE,6BAAC,cAAD;AACE,IAAA,KAAK,EAAC,6BADR;AAEE,iBAAU,gBAFZ;AAGE,IAAA,YAAY,EAAEpB,OAAO,CAACwC,QAHxB;AAIE,IAAA,QAAQ,EAAGC,IAAD,IAAejB,eAAe,CAAC;AAAEgB,MAAAA,QAAQ,EAAEC;AAAZ,KAAD;AAJ1C,kBAME,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAC,MAArB;AAA4B,iBAAU;AAAtC,YANF,eAWE,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAC,UAArB;AAAgC,iBAAU;AAA1C,gBAXF,CADF,CAZF,CA1CJ,EA2EG,sBAAS,CAAC,KAAD,CAAT,EAAkBzC,OAAO,CAACE,gBAA1B;AAAA;AACC;AACA,+BAAC,eAAD,qBACE,6BAAC,cAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,iBAAU,oBAFZ;AAGE,IAAA,YAAY,EAAEF,OAAO,CAAC0C,SAAR,CAAkBrC,IAHlC;AAIE,IAAA,QAAQ,EAAGA,IAAD,IAAemB,eAAe,CAAC;AAAEkB,MAAAA,SAAS,EAAE;AAAErC,QAAAA;AAAF;AAAb,KAAD;AAJ1C,kBAME,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAC,kBAArB;AAAwC,iBAAU;AAAlD,wBANF,eAWE,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAC,WAArB;AAAiC,iBAAU;AAA3C,iBAXF,CADF,CA7EJ,EAiGG,CAAC,sBAAS,CAAC,QAAD,EAAW,SAAX,CAAT,EAAgCL,OAAO,CAACE,gBAAxC,CAAD,iBACC,6BAAC,cAAD,CAAO,QAAP,qBAEE,6BAAC,eAAD,qBACE,6BAAC,cAAD;AACE,IAAA,KAAK,EAAC,kBADR;AAEE,iBAAU,uBAFZ;AAGE,IAAA,KAAK,EAAEF,OAAO,CAACkC,MAAR,CAAeC,OAAf,GAAyBnC,OAAO,CAACkC,MAAR,CAAeE,SAAxC,GAAoD,QAH7D;AAIE,IAAA,QAAQ,EAAEH;AAJZ,kBAME,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAC,QAArB;AAA8B,iBAAU;AAAxC,mBANF,eAWE,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAC,MAArB;AAA4B,iBAAU;AAAtC,aAXF,eAgBE,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAC,OAArB;AAA6B,iBAAU;AAAvC,cAhBF,CADF,CAFF,EA0BGjC,OAAO,CAACkC,MAAR,CAAeC,OAAf;AAAA;AACC;AACA,+BAAC,eAAD,qBACE,6BAAC,cAAD;AACE,IAAA,KAAK,EAAC,oBADR;AAEE,iBAAU,wBAFZ;AAGE,IAAA,KAAK,EAAEnC,OAAO,CAACkC,MAAR,CAAeS,UAHxB;AAIE,IAAA,QAAQ,EAAGA,UAAD,IAAqBnB,eAAe,CAAC;AAAEU,MAAAA,MAAM,EAAE;AAAES,QAAAA;AAAF;AAAV,KAAD;AAJhD,kBAME,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAC,QAArB;AAA8B,iBAAU;AAAxC,cANF,eAWE,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAC,UAArB;AAAgC,iBAAU;AAA1C,gBAXF,CADF,CA5BJ,CAlGJ,EAoJG,sBAAS,CAAC,KAAD,CAAT,EAAkB3C,OAAO,CAACE,gBAA1B;AAAA;AACC;AACA,+BAAC,eAAD,qBACE,6BAAC,gBAAD;AACE,iBAAU,kBADZ;AAEE,IAAA,cAAc,EAAEF,OAAO,CAAC4C,UAF1B;AAGE,IAAA,QAAQ,EAAEC,KAAK,IAAIrB,eAAe,CAAC;AAAEoB,MAAAA,UAAU,EAAEC,KAAK,CAACC,MAAN,CAAaC;AAA3B,KAAD;AAHpC,uBADF,CAtJJ,EAgKG,CAAC,sBAAS,CAAC,QAAD,EAAW,SAAX,CAAT,EAAgC/C,OAAO,CAACE,gBAAxC,CAAD;AAAA;AACC;AACA,+BAAC,eAAD,qBACE,6BAAC,cAAD;AACE,IAAA,KAAK,EAAC,UADR;AAEE,iBAAU,gBAFZ;AAGE,IAAA,YAAY,EAAEF,OAAO,CAAC6B,MAAR,CAAemB,QAH/B;AAIE,IAAA,QAAQ,EAAE,CAAC,sBAAS,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB,CAAT,EAAqChD,OAAO,CAACE,gBAA7C,CAJb;AAKE,IAAA,QAAQ,EAAG8C,QAAD,IAAmBxB,eAAe,CAAC;AAAEK,MAAAA,MAAM,EAAE;AAAEmB,QAAAA;AAAF;AAAV,KAAD;AAL9C,kBAOE,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAE,IAAtB;AAA4B,iBAAU;AAAtC,gBAPF,eAYE,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAC,OAArB;AAA6B,iBAAU;AAAvC,aAZF,CADF,CAlKJ,EAuLG,sBAAS,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB,CAAT,EAAqChD,OAAO,CAACE,gBAA7C;AAAA;AACC;AACA,+BAAC,eAAD,qBACE,6BAAC,gBAAD;AACE,iBAAU,uBADZ;AAEE,IAAA,cAAc,EAAEF,OAAO,CAAC6B,MAAR,CAAeoB,aAFjC;AAGE,IAAA,QAAQ,EAAEJ,KAAK,IAAIrB,eAAe,CAAC;AAAEK,MAAAA,MAAM,EAAE;AAAEoB,QAAAA,aAAa,EAAEJ,KAAK,CAACC,MAAN,CAAaC;AAA9B;AAAV,KAAD;AAHpC,sCADF,CAzLJ,EAmMG,CAAC,sBAAS,CAAC,QAAD,EAAW,SAAX,EAAsB,QAAtB,EAAgC,SAAhC,CAAT,EAAqD/C,OAAO,CAACE,gBAA7D,CAAD;AAAA;AACC;AACA,+BAAC,eAAD,qBACE,6BAAC,cAAD;AACE,IAAA,KAAK,EAAC,yBADR;AAEE,iBAAU,qBAFZ;AAGE,IAAA,YAAY,EAAEF,OAAO,CAACkD,mBAAR,GAA8B,CAA9B,GAAkC,CAHlD;AAIE,IAAA,QAAQ,EAAG9B,KAAD,IAAgBI,eAAe,CAAC;AAAE0B,MAAAA,mBAAmB,EAAE,CAAC,CAAC9B;AAAzB,KAAD;AAJ3C,kBAME,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAE,CAAtB;AAAyB,iBAAU;AAAnC,+BANF,eAWE,6BAAC,cAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAE,CAAtB;AAAyB,iBAAU;AAAnC,yCAXF,CADF,CArMJ,CADF;AA2ND;;AAEDE,eAAe,CAAC6B,SAAhB,GAA4BC,0BAA5B","sourcesContent":["import { isArray, map, mapValues, includes, some, each, difference, toNumber } from \"lodash\";\r\nimport React, { useMemo } from \"react\";\r\nimport { Section, Select, Checkbox, InputNumber } from \"@/components/visualizations/editor\";\r\nimport { UpdateOptionsStrategy } from \"@/components/visualizations/editor/createTabbedEditor\";\r\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\r\n\r\nimport ChartTypeSelect from \"./ChartTypeSelect\";\r\nimport ColumnMappingSelect from \"./ColumnMappingSelect\";\r\n\r\nfunction getAvailableColumnMappingTypes(options: any) {\r\n  const result = [\"x\", \"y\"];\r\n\r\n  if (!includes([\"custom\", \"heatmap\"], options.globalSeriesType)) {\r\n    result.push(\"series\");\r\n  }\r\n\r\n  if (options.globalSeriesType === \"bubble\" || some(options.seriesOptions, { type: \"bubble\" })) {\r\n    result.push(\"size\");\r\n  }\r\n\r\n  if (options.globalSeriesType === \"heatmap\") {\r\n    result.push(\"zVal\");\r\n  }\r\n\r\n  if (!includes([\"custom\", \"bubble\", \"heatmap\"], options.globalSeriesType)) {\r\n    result.push(\"yError\");\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction getMappedColumns(options: any, availableColumns: any) {\r\n  const mappedColumns = {};\r\n  const availableTypes = getAvailableColumnMappingTypes(options);\r\n  each(availableTypes, type => {\r\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n    mappedColumns[type] = ColumnMappingSelect.MappingTypes[type].multiple ? [] : null;\r\n  });\r\n\r\n  availableColumns = map(availableColumns, c => c.name);\r\n  const usedColumns: any = [];\r\n\r\n  each(options.columnMapping, (type, column) => {\r\n    if (includes(availableColumns, column) && includes(availableTypes, type)) {\r\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n      const { multiple } = ColumnMappingSelect.MappingTypes[type];\r\n      if (multiple) {\r\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n        mappedColumns[type].push(column);\r\n      } else {\r\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n        mappedColumns[type] = column;\r\n      }\r\n      usedColumns.push(column);\r\n    }\r\n  });\r\n\r\n  return {\r\n    mappedColumns,\r\n    unusedColumns: difference(availableColumns, usedColumns),\r\n  };\r\n}\r\n\r\nfunction mappedColumnsToColumnMappings(mappedColumns: any) {\r\n  const result = {};\r\n  each(mappedColumns, (value, type) => {\r\n    if (isArray(value)) {\r\n      each(value, v => {\r\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n        result[v] = type;\r\n      });\r\n    } else {\r\n      if (value) {\r\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n        result[value] = type;\r\n      }\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\nexport default function GeneralSettings({ options, data, onOptionsChange }: any) {\r\n  const { mappedColumns, unusedColumns } = useMemo(() => getMappedColumns(options, data.columns), [\r\n    options,\r\n    data.columns,\r\n  ]);\r\n\r\n  function handleGlobalSeriesTypeChange(globalSeriesType: any) {\r\n    onOptionsChange({\r\n      globalSeriesType,\r\n      showDataLabels: globalSeriesType === \"pie\",\r\n      swappedAxes: false,\r\n      seriesOptions: mapValues(options.seriesOptions, series => ({\r\n        ...series,\r\n        type: globalSeriesType,\r\n      })),\r\n    });\r\n  }\r\n\r\n  function handleColumnMappingChange(column: any, type: any) {\r\n    const columnMapping = mappedColumnsToColumnMappings({\r\n      ...mappedColumns,\r\n      [type]: column,\r\n    });\r\n    onOptionsChange({ columnMapping }, UpdateOptionsStrategy.shallowMerge);\r\n  }\r\n\r\n  function handleLegendPlacementChange(value: any) {\r\n    if (value === \"hidden\") {\r\n      onOptionsChange({ legend: { enabled: false } });\r\n    } else {\r\n      onOptionsChange({ legend: { enabled: true, placement: value } });\r\n    }\r\n  }\r\n\r\n  function handleAxesSwapping() {\r\n    // moves any item in the right Y axis to the left one\r\n    const seriesOptions = mapValues(options.seriesOptions, series => ({\r\n      ...series,\r\n      yAxis: 0,\r\n    }));\r\n    onOptionsChange({ swappedAxes: !options.swappedAxes, seriesOptions });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <ChartTypeSelect\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '{ label: string; \"data-test\": string; defaul... Remove this comment to see the full error message\r\n          label=\"Chart Type\"\r\n          data-test=\"Chart.GlobalSeriesType\"\r\n          defaultValue={options.globalSeriesType}\r\n          onChange={handleGlobalSeriesTypeChange}\r\n        />\r\n      </Section>\r\n\r\n      {includes([\"column\", \"line\", \"box\"], options.globalSeriesType) && (\r\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\r\n        <Section>\r\n          <Checkbox\r\n            data-test=\"Chart.SwappedAxes\"\r\n            defaultChecked={options.swappedAxes}\r\n            checked={options.swappedAxes}\r\n            onChange={handleAxesSwapping}>\r\n            Horizontal Chart\r\n          </Checkbox>\r\n        </Section>\r\n      )}\r\n\r\n      {map(mappedColumns, (value, type) => (\r\n        <ColumnMappingSelect\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\r\n          key={type}\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\r\n          type={type}\r\n          value={value}\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\r\n          areAxesSwapped={options.swappedAxes}\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'unknown[]' is not assignable to type 'never'... Remove this comment to see the full error message\r\n          availableColumns={unusedColumns}\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '(column: any, type: any) => void' is not ass... Remove this comment to see the full error message\r\n          onChange={handleColumnMappingChange}\r\n        />\r\n      ))}\r\n\r\n      {includes([\"bubble\"], options.globalSeriesType) && (\r\n        <React.Fragment>\r\n          {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n          <Section>\r\n            <InputNumber\r\n              label=\"Bubble Size Coefficient\"\r\n              data-test=\"Chart.BubbleCoefficient\"\r\n              defaultValue={options.coefficient}\r\n              onChange={(value: any) => onOptionsChange({ coefficient: toNumber(value) })}\r\n            />\r\n          </Section>\r\n\r\n          {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n          <Section>\r\n            <Select\r\n              label=\"Bubble Size Proportional To\"\r\n              data-test=\"Chart.SizeMode\"\r\n              defaultValue={options.sizemode}\r\n              onChange={(mode: any) => onOptionsChange({ sizemode: mode })}>\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              <Select.Option value=\"area\" data-test=\"Chart.SizeMode.Area\">\r\n                Area\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              </Select.Option>\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              <Select.Option value=\"diameter\" data-test=\"Chart.SizeMode.Diameter\">\r\n                Diameter\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              </Select.Option>\r\n            </Select>\r\n          </Section>\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {includes([\"pie\"], options.globalSeriesType) && (\r\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\r\n        <Section>\r\n          <Select\r\n            label=\"Direction\"\r\n            data-test=\"Chart.PieDirection\"\r\n            defaultValue={options.direction.type}\r\n            onChange={(type: any) => onOptionsChange({ direction: { type } })}>\r\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            <Select.Option value=\"counterclockwise\" data-test=\"Chart.PieDirection.Counterclockwise\">\r\n              Counterclockwise\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            </Select.Option>\r\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            <Select.Option value=\"clockwise\" data-test=\"Chart.PieDirection.Clockwise\">\r\n              Clockwise\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            </Select.Option>\r\n          </Select>\r\n        </Section>\r\n      )}\r\n\r\n      {!includes([\"custom\", \"heatmap\"], options.globalSeriesType) && (\r\n        <React.Fragment>\r\n          {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n          <Section>\r\n            <Select\r\n              label=\"Legend Placement\"\r\n              data-test=\"Chart.LegendPlacement\"\r\n              value={options.legend.enabled ? options.legend.placement : \"hidden\"}\r\n              onChange={handleLegendPlacementChange}>\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              <Select.Option value=\"hidden\" data-test=\"Chart.LegendPlacement.HideLegend\">\r\n                Hide legend\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              </Select.Option>\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              <Select.Option value=\"auto\" data-test=\"Chart.LegendPlacement.Auto\">\r\n                Right\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              </Select.Option>\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              <Select.Option value=\"below\" data-test=\"Chart.LegendPlacement.Below\">\r\n                Bottom\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n              </Select.Option>\r\n            </Select>\r\n          </Section>\r\n\r\n          {options.legend.enabled && (\r\n            // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\r\n            <Section>\r\n              <Select\r\n                label=\"Legend Items Order\"\r\n                data-test=\"Chart.LegendItemsOrder\"\r\n                value={options.legend.traceorder}\r\n                onChange={(traceorder: any) => onOptionsChange({ legend: { traceorder } })}>\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n                <Select.Option value=\"normal\" data-test=\"Chart.LegendItemsOrder.Normal\">\r\n                  Normal\r\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n                </Select.Option>\r\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n                <Select.Option value=\"reversed\" data-test=\"Chart.LegendItemsOrder.Reversed\">\r\n                  Reversed\r\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n                </Select.Option>\r\n              </Select>\r\n            </Section>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {includes([\"box\"], options.globalSeriesType) && (\r\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\r\n        <Section>\r\n          <Checkbox\r\n            data-test=\"Chart.ShowPoints\"\r\n            defaultChecked={options.showpoints}\r\n            onChange={event => onOptionsChange({ showpoints: event.target.checked })}>\r\n            Show All Points\r\n          </Checkbox>\r\n        </Section>\r\n      )}\r\n\r\n      {!includes([\"custom\", \"heatmap\"], options.globalSeriesType) && (\r\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\r\n        <Section>\r\n          <Select\r\n            label=\"Stacking\"\r\n            data-test=\"Chart.Stacking\"\r\n            defaultValue={options.series.stacking}\r\n            disabled={!includes([\"line\", \"area\", \"column\"], options.globalSeriesType)}\r\n            onChange={(stacking: any) => onOptionsChange({ series: { stacking } })}>\r\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            <Select.Option value={null} data-test=\"Chart.Stacking.Disabled\">\r\n              Disabled\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            </Select.Option>\r\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            <Select.Option value=\"stack\" data-test=\"Chart.Stacking.Stack\">\r\n              Stack\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            </Select.Option>\r\n          </Select>\r\n        </Section>\r\n      )}\r\n\r\n      {includes([\"line\", \"area\", \"column\"], options.globalSeriesType) && (\r\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\r\n        <Section>\r\n          <Checkbox\r\n            data-test=\"Chart.NormalizeValues\"\r\n            defaultChecked={options.series.percentValues}\r\n            onChange={event => onOptionsChange({ series: { percentValues: event.target.checked } })}>\r\n            Normalize values to percentage\r\n          </Checkbox>\r\n        </Section>\r\n      )}\r\n\r\n      {!includes([\"custom\", \"heatmap\", \"bubble\", \"scatter\"], options.globalSeriesType) && (\r\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\r\n        <Section>\r\n          <Select\r\n            label=\"Missing and NULL values\"\r\n            data-test=\"Chart.MissingValues\"\r\n            defaultValue={options.missingValuesAsZero ? 1 : 0}\r\n            onChange={(value: any) => onOptionsChange({ missingValuesAsZero: !!value })}>\r\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            <Select.Option value={0} data-test=\"Chart.MissingValues.Keep\">\r\n              Do not display in chart\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            </Select.Option>\r\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            <Select.Option value={1} data-test=\"Chart.MissingValues.Zero\">\r\n              Convert to 0 and display in chart\r\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\r\n            </Select.Option>\r\n          </Select>\r\n        </Section>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nGeneralSettings.propTypes = EditorPropTypes;\r\n"],"file":"GeneralSettings.js"}