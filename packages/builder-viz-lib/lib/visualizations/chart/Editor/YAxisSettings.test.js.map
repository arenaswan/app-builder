{"version":3,"sources":["../../../../src/visualizations/chart/Editor/YAxisSettings.test.tsx"],"names":["findByTestID","wrapper","testId","find","elementExists","length","mount","options","done","enzyme","columns","rows","changedOptions","expect","toMatchSnapshot","describe","test","el","globalSeriesType","yAxis","type","opposite","last","simulate","target","value","toBeTruthy","toBeFalsy","sortY","reverseY"],"mappings":";;AAAA;;AACA;;AAEA;;AACA;;;;AAEA,SAASA,YAAT,CAAsBC,OAAtB,EAAoCC,MAApC,EAAiD;AAC/C,SAAOD,OAAO,CAACE,IAAR,wBAA4BD,MAA5B,SAAP;AACD;;AAED,SAASE,aAAT,CAAuBH,OAAvB,EAAqCC,MAArC,EAAkD;AAChD,SAAOF,YAAY,CAACC,OAAD,EAAUC,MAAV,CAAZ,CAA8BG,MAA9B,GAAuC,CAA9C;AACD;;AAED,SAASC,KAAT,CAAeC,OAAf,EAA6BC,IAA7B,EAAwC;AACtCD,EAAAA,OAAO,GAAG,yBAAWA,OAAX,CAAV;AACA,SAAOE,gBAAOH,KAAP,eACL,6BAAC,sBAAD;AACE,IAAA,iBAAiB,EAAC,MADpB;AAEE,IAAA,IAAI,EAAE;AAAEI,MAAAA,OAAO,EAAE,EAAX;AAAeC,MAAAA,IAAI,EAAE;AAArB,KAFR;AAGE,IAAA,OAAO,EAAEJ,OAHX;AAIE,IAAA,eAAe,EAAEK,cAAc,IAAI;AACjCC,MAAAA,MAAM,CAACD,cAAD,CAAN,CAAuBE,eAAvB;AACAN,MAAAA,IAAI;AACL;AAPH,IADK,CAAP;AAWD;;AAEDO,QAAQ,CAAC,sDAAD,EAAyD,MAAM;AACrEC,EAAAA,IAAI,CAAC,mBAAD,EAAsBR,IAAI,IAAI;AAChC,QAAMS,EAAE,GAAGX,KAAK,CACd;AACEY,MAAAA,gBAAgB,EAAE,QADpB;AAEEC,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,EAAqB;AAAEA,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,QAAQ,EAAE;AAA5B,OAArB;AAFT,KADc,EAKdb,IALc,CAAhB;AAQAR,IAAAA,YAAY,CAACiB,EAAD,EAAK,sBAAL,CAAZ,CACGK,IADH,GAEGC,QAFH,CAEY,WAFZ;AAGAvB,IAAAA,YAAY,CAACiB,EAAD,EAAK,+BAAL,CAAZ,CACGK,IADH,GAEGC,QAFH,CAEY,OAFZ;AAGD,GAfG,CAAJ;AAiBAP,EAAAA,IAAI,CAAC,mBAAD,EAAsBR,IAAI,IAAI;AAChC,QAAMS,EAAE,GAAGX,KAAK,CACd;AACEY,MAAAA,gBAAgB,EAAE,QADpB;AAEEC,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,EAAqB;AAAEA,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,QAAQ,EAAE;AAA5B,OAArB;AAFT,KADc,EAKdb,IALc,CAAhB;AAQAR,IAAAA,YAAY,CAACiB,EAAD,EAAK,sBAAL,CAAZ,CACGK,IADH,GAEGC,QAFH,CAEY,QAFZ,EAEsB;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAAV,KAFtB;AAGD,GAZG,CAAJ;AAcAT,EAAAA,IAAI,CAAC,wBAAD,EAA2BR,IAAI,IAAI;AACrC,QAAMS,EAAE,GAAGX,KAAK,CACd;AACEY,MAAAA,gBAAgB,EAAE,QADpB;AAEEC,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,EAAqB;AAAEA,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,QAAQ,EAAE;AAA5B,OAArB;AAFT,KADc,EAKdb,IALc,CAAhB;AAQAR,IAAAA,YAAY,CAACiB,EAAD,EAAK,0BAAL,CAAZ,CACGd,IADH,CACQ,OADR,EAEGmB,IAFH,GAGGC,QAHH,CAGY,QAHZ,EAGsB;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAAV,KAHtB;AAID,GAbG,CAAJ;AAeAT,EAAAA,IAAI,CAAC,wBAAD,EAA2BR,IAAI,IAAI;AACrC,QAAMS,EAAE,GAAGX,KAAK,CACd;AACEY,MAAAA,gBAAgB,EAAE,QADpB;AAEEC,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,EAAqB;AAAEA,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,QAAQ,EAAE;AAA5B,OAArB;AAFT,KADc,EAKdb,IALc,CAAhB;AAQAR,IAAAA,YAAY,CAACiB,EAAD,EAAK,0BAAL,CAAZ,CACGd,IADH,CACQ,OADR,EAEGmB,IAFH,GAGGC,QAHH,CAGY,QAHZ,EAGsB;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAAV,KAHtB;AAID,GAbG,CAAJ;AAeAV,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCC,IAAAA,IAAI,CAAC,kCAAD,EAAqC,MAAM;AAC7C;AACA,UAAMC,EAAE,GAAGX,KAAK,CAAC;AACfY,QAAAA,gBAAgB,EAAE,QADH;AAEfC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,QAAQ,EAAE;AAA5B,SAArB;AAFQ,OAAD,CAAhB;AAKAR,MAAAA,MAAM,CAACT,aAAa,CAACa,EAAD,EAAK,uBAAL,CAAd,CAAN,CAAmDS,UAAnD;AACD,KARG,CAAJ;AASD,GAVO,CAAR;AAYAX,EAAAA,QAAQ,CAAC,aAAD,EAAgB,MAAM;AAC5BC,IAAAA,IAAI,CAAC,sCAAD,EAAyC,MAAM;AACjD;AACA,UAAMC,EAAE,GAAGX,KAAK,CAAC;AACfY,QAAAA,gBAAgB,EAAE,SADH;AAEfC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAD,EAAqB;AAAEA,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,QAAQ,EAAE;AAA5B,SAArB;AAFQ,OAAD,CAAhB;AAKAR,MAAAA,MAAM,CAACT,aAAa,CAACa,EAAD,EAAK,uBAAL,CAAd,CAAN,CAAmDU,SAAnD;AACD,KARG,CAAJ;AAUAX,IAAAA,IAAI,CAAC,2BAAD,EAA8BR,IAAI,IAAI;AACxC,UAAMS,EAAE,GAAGX,KAAK,CACd;AACEY,QAAAA,gBAAgB,EAAE,SADpB;AAEEU,QAAAA,KAAK,EAAE;AAFT,OADc,EAKdpB,IALc,CAAhB;AAQAR,MAAAA,YAAY,CAACiB,EAAD,EAAK,sBAAL,CAAZ,CACGK,IADH,GAEGC,QAFH,CAEY,OAFZ;AAGD,KAZG,CAAJ;AAcAP,IAAAA,IAAI,CAAC,8BAAD,EAAiCR,IAAI,IAAI;AAC3C,UAAMS,EAAE,GAAGX,KAAK,CACd;AACEY,QAAAA,gBAAgB,EAAE,SADpB;AAEEW,QAAAA,QAAQ,EAAE;AAFZ,OADc,EAKdrB,IALc,CAAhB;AAQAR,MAAAA,YAAY,CAACiB,EAAD,EAAK,yBAAL,CAAZ,CACGK,IADH,GAEGC,QAFH,CAEY,OAFZ;AAGD,KAZG,CAAJ;AAaD,GAtCO,CAAR;AAuCD,CAjHO,CAAR","sourcesContent":["import React from \"react\";\r\nimport enzyme from \"enzyme\";\r\n\r\nimport getOptions from \"../getOptions\";\r\nimport YAxisSettings from \"./YAxisSettings\";\r\n\r\nfunction findByTestID(wrapper: any, testId: any) {\r\n  return wrapper.find(`[data-test=\"${testId}\"]`);\r\n}\r\n\r\nfunction elementExists(wrapper: any, testId: any) {\r\n  return findByTestID(wrapper, testId).length > 0;\r\n}\r\n\r\nfunction mount(options: any, done: any) {\r\n  options = getOptions(options);\r\n  return enzyme.mount(\r\n    <YAxisSettings\r\n      visualizationName=\"Test\"\r\n      data={{ columns: [], rows: [] }}\r\n      options={options}\r\n      onOptionsChange={changedOptions => {\r\n        expect(changedOptions).toMatchSnapshot();\r\n        done();\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\ndescribe(\"Visualizations -> Chart -> Editor -> Y-Axis Settings\", () => {\r\n  test(\"Changes axis type\", done => {\r\n    const el = mount(\r\n      {\r\n        globalSeriesType: \"column\",\r\n        yAxis: [{ type: \"linear\" }, { type: \"linear\", opposite: true }],\r\n      },\r\n      done\r\n    );\r\n\r\n    findByTestID(el, \"Chart.LeftYAxis.Type\")\r\n      .last()\r\n      .simulate(\"mouseDown\");\r\n    findByTestID(el, \"Chart.LeftYAxis.Type.Category\")\r\n      .last()\r\n      .simulate(\"click\");\r\n  });\r\n\r\n  test(\"Changes axis name\", done => {\r\n    const el = mount(\r\n      {\r\n        globalSeriesType: \"column\",\r\n        yAxis: [{ type: \"linear\" }, { type: \"linear\", opposite: true }],\r\n      },\r\n      done\r\n    );\r\n\r\n    findByTestID(el, \"Chart.LeftYAxis.Name\")\r\n      .last()\r\n      .simulate(\"change\", { target: { value: \"test\" } });\r\n  });\r\n\r\n  test(\"Changes axis min value\", done => {\r\n    const el = mount(\r\n      {\r\n        globalSeriesType: \"column\",\r\n        yAxis: [{ type: \"linear\" }, { type: \"linear\", opposite: true }],\r\n      },\r\n      done\r\n    );\r\n\r\n    findByTestID(el, \"Chart.LeftYAxis.RangeMin\")\r\n      .find(\"input\")\r\n      .last()\r\n      .simulate(\"change\", { target: { value: \"50\" } });\r\n  });\r\n\r\n  test(\"Changes axis max value\", done => {\r\n    const el = mount(\r\n      {\r\n        globalSeriesType: \"column\",\r\n        yAxis: [{ type: \"linear\" }, { type: \"linear\", opposite: true }],\r\n      },\r\n      done\r\n    );\r\n\r\n    findByTestID(el, \"Chart.LeftYAxis.RangeMax\")\r\n      .find(\"input\")\r\n      .last()\r\n      .simulate(\"change\", { target: { value: \"200\" } });\r\n  });\r\n\r\n  describe(\"for non-heatmap\", () => {\r\n    test(\"Right Y Axis should be available\", () => {\r\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 1.\r\n      const el = mount({\r\n        globalSeriesType: \"column\",\r\n        yAxis: [{ type: \"linear\" }, { type: \"linear\", opposite: true }],\r\n      });\r\n\r\n      expect(elementExists(el, \"Chart.RightYAxis.Type\")).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  describe(\"for heatmap\", () => {\r\n    test(\"Right Y Axis should not be available\", () => {\r\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 1.\r\n      const el = mount({\r\n        globalSeriesType: \"heatmap\",\r\n        yAxis: [{ type: \"linear\" }, { type: \"linear\", opposite: true }],\r\n      });\r\n\r\n      expect(elementExists(el, \"Chart.RightYAxis.Type\")).toBeFalsy();\r\n    });\r\n\r\n    test(\"Sets Sort X Values option\", done => {\r\n      const el = mount(\r\n        {\r\n          globalSeriesType: \"heatmap\",\r\n          sortY: false,\r\n        },\r\n        done\r\n      );\r\n\r\n      findByTestID(el, \"Chart.LeftYAxis.Sort\")\r\n        .last()\r\n        .simulate(\"click\");\r\n    });\r\n\r\n    test(\"Sets Reverse Y Values option\", done => {\r\n      const el = mount(\r\n        {\r\n          globalSeriesType: \"heatmap\",\r\n          reverseY: false,\r\n        },\r\n        done\r\n      );\r\n\r\n      findByTestID(el, \"Chart.LeftYAxis.Reverse\")\r\n        .last()\r\n        .simulate(\"click\");\r\n    });\r\n  });\r\n});\r\n"],"file":"YAxisSettings.test.js"}