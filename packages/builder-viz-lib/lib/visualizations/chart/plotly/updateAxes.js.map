{"version":3,"sources":["../../../../src/visualizations/chart/plotly/updateAxes.ts"],"names":["calculateAxisRange","range","min","max","calculateAbsoluteDiff","value","totalRange","percentageDiff","Math","abs","alignYAxesAtZero","axisA","axisB","totalRangeA","proportionA","totalRangeB","proportionB","diff","updateAxes","plotlyElement","seriesList","layout","options","updates","yaxis","autorange","yaxis2","axisOptions","yAxis","defaultRange","rangeMin","rangeMax","swappedAxes","series","orientation","x","y","xaxis"],"mappings":"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","sourcesContent":["import { isObject, isNumber, each } from \"lodash\";\r\n\r\nfunction calculateAxisRange(range: any, min: any, max: any) {\r\n  return [isNumber(min) ? min : range[0], isNumber(max) ? max : range[1]];\r\n}\r\n\r\nfunction calculateAbsoluteDiff(value: any, totalRange: any, percentageDiff: any) {\r\n  return (percentageDiff * totalRange) / (1 - Math.abs(value) / totalRange - percentageDiff);\r\n}\r\n\r\nfunction alignYAxesAtZero(axisA: any, axisB: any) {\r\n  // Make sure the origin is included in both axes\r\n  axisA.range[1] = Math.max(0, axisA.range[1]);\r\n  axisB.range[1] = Math.max(0, axisB.range[1]);\r\n  axisA.range[0] = Math.min(0, axisA.range[0]);\r\n  axisB.range[0] = Math.min(0, axisB.range[0]);\r\n\r\n  const totalRangeA = axisA.range[1] - axisA.range[0];\r\n  const proportionA = axisA.range[1] / totalRangeA;\r\n  const totalRangeB = axisB.range[1] - axisB.range[0];\r\n  const proportionB = axisB.range[1] / totalRangeB;\r\n\r\n  // Calculate the difference between the proportions and distribute them within the two axes\r\n  const diff = Math.abs(proportionB - proportionA) / 2;\r\n\r\n  // Don't do anything if the difference is too low\r\n  if (diff < 0.01) {\r\n    return;\r\n  }\r\n\r\n  // Select the two that will correct the proportion by always augmenting, so the chart is not cut\r\n  if (proportionA < proportionB) {\r\n    // increase axisA max and axisB min\r\n    axisA.range[1] += calculateAbsoluteDiff(axisA.range[1], totalRangeA, diff);\r\n    axisB.range[0] -= calculateAbsoluteDiff(axisA.range[0], totalRangeB, diff);\r\n  } else {\r\n    // increase axisB max and axisA min\r\n    axisB.range[1] += calculateAbsoluteDiff(axisB.range[1], totalRangeB, diff);\r\n    axisA.range[0] -= calculateAbsoluteDiff(axisA.range[0], totalRangeA, diff);\r\n  }\r\n}\r\n\r\nexport default function updateAxes(plotlyElement: any, seriesList: any, layout: any, options: any) {\r\n  const updates = {};\r\n  if (isObject(layout.yaxis)) {\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\r\n    updates.yaxis = {\r\n      ...layout.yaxis,\r\n      autorange: true,\r\n      range: null,\r\n    };\r\n  }\r\n  if (isObject(layout.yaxis2)) {\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis2' does not exist on type '{}'.\r\n    updates.yaxis2 = {\r\n      ...layout.yaxis2,\r\n      autorange: true,\r\n      range: null,\r\n    };\r\n  }\r\n\r\n  return [\r\n    updates,\r\n    () => {\r\n      // Update Y Ranges\r\n      if (isObject(layout.yaxis)) {\r\n        const axisOptions = options.yAxis[0];\r\n        const defaultRange = plotlyElement.layout.yaxis.range;\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\r\n        updates.yaxis.autorange = false;\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\r\n        updates.yaxis.range = calculateAxisRange(defaultRange, axisOptions.rangeMin, axisOptions.rangeMax);\r\n      }\r\n\r\n      if (isObject(layout.yaxis2)) {\r\n        const axisOptions = options.yAxis[1];\r\n        const defaultRange = plotlyElement.layout.yaxis2.range;\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis2' does not exist on type '{}'.\r\n        updates.yaxis2.autorange = false;\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis2' does not exist on type '{}'.\r\n        updates.yaxis2.range = calculateAxisRange(defaultRange, axisOptions.rangeMin, axisOptions.rangeMax);\r\n      }\r\n\r\n      // Swap Axes\r\n      if (options.swappedAxes) {\r\n        each(seriesList, series => {\r\n          series.orientation = \"h\";\r\n          const { x, y } = series;\r\n          series.x = y;\r\n          series.y = x;\r\n        });\r\n\r\n        const { xaxis } = layout;\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\r\n        const { yaxis, yaxis2 } = updates;\r\n\r\n        if (isObject(xaxis) && isObject(yaxis)) {\r\n          // @ts-expect-error ts-migrate(2339) FIXME: Property 'xaxis' does not exist on type '{}'.\r\n          updates.xaxis = yaxis;\r\n          // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\r\n          updates.yaxis = xaxis;\r\n        }\r\n        if (isObject(yaxis2)) {\r\n          // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis2' does not exist on type '{}'.\r\n          updates.yaxis2 = null;\r\n        }\r\n      }\r\n\r\n      // Align Y axes\r\n      if (options.alignYAxesAtZero && isObject(layout.yaxis) && isObject(layout.yaxis2)) {\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\r\n        alignYAxesAtZero(updates.yaxis, updates.yaxis2);\r\n      }\r\n\r\n      return [updates, null]; // no further updates\r\n    },\r\n  ];\r\n}\r\n"],"file":"updateAxes.js"}