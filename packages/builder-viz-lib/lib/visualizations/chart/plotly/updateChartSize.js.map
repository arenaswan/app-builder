{"version":3,"sources":["../../../../src/visualizations/chart/plotly/updateChartSize.ts"],"names":["fixLegendContainer","plotlyElement","legend","querySelector","node","parentNode","tagName","toLowerCase","style","overflow","placeLegendNextToPlot","layout","transformName","prop","orientation","y","x","xanchor","yanchor","placeLegendBelowPlot","layoutHeight","height","bounds","getBoundingClientRect","Math","floor","max","bottom","top","placeLegendAuto","width","updateChartSize","options","offsetWidth","offsetHeight","__previousSize","previousWidth","previousHeight","enabled","placement"],"mappings":"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","sourcesContent":["import { find, pick, extend } from \"lodash\";\r\n\r\nfunction fixLegendContainer(plotlyElement: any) {\r\n  const legend = plotlyElement.querySelector(\".legend\");\r\n  if (legend) {\r\n    let node = legend.parentNode;\r\n    while (node) {\r\n      if (node.tagName.toLowerCase() === \"svg\") {\r\n        node.style.overflow = \"visible\";\r\n        break;\r\n      }\r\n      node = node.parentNode;\r\n    }\r\n  }\r\n}\r\n\r\nfunction placeLegendNextToPlot(plotlyElement: any, layout: any) {\r\n  const transformName = find(\r\n    [\"transform\", \"WebkitTransform\", \"MozTransform\", \"MsTransform\", \"OTransform\"],\r\n    prop => prop in plotlyElement.style\r\n  );\r\n\r\n  layout.legend = extend({}, layout.legend, {\r\n    orientation: \"v\",\r\n    // vertical legend will be rendered properly, so just place it to the right\r\n    // side of plot\r\n    y: 1,\r\n    x: 1,\r\n    xanchor: \"left\",\r\n    yanchor: \"top\",\r\n  });\r\n\r\n  const legend = plotlyElement.querySelector(\".legend\");\r\n  if (legend) {\r\n    // @ts-expect-error ts-migrate(2538) FIXME: Type 'undefined' cannot be used as an index type.\r\n    legend.style[transformName] = null;\r\n  }\r\n\r\n  return [pick(layout, [\"width\", \"height\", \"legend\"]), null]; // no further updates\r\n}\r\n\r\nfunction placeLegendBelowPlot(plotlyElement: any, layout: any) {\r\n  const transformName = find(\r\n    [\"transform\", \"WebkitTransform\", \"MozTransform\", \"MsTransform\", \"OTransform\"],\r\n    prop => prop in plotlyElement.style\r\n  );\r\n\r\n  // Save current `layout.height` value because `Plotly.relayout().then(...)` handler may be called multiple\r\n  // times within single update, and since the handler mutates `layout` object - it may lead to bugs\r\n  const layoutHeight = layout.height;\r\n\r\n  // change legend orientation to horizontal; plotly has a bug with this\r\n  // legend alignment - it does not preserve enough space under the plot;\r\n  // so we'll hack this: update plot (it will re-render legend), compute\r\n  // legend height, reduce plot size by legend height (but not less than\r\n  // half of plot container's height - legend will have max height equal to\r\n  // plot height), re-render plot again and offset legend to the space under\r\n  // the plot.\r\n  // Related issue: https://github.com/plotly/plotly.js/issues/1199\r\n  layout.legend = extend({}, layout.legend, {\r\n    orientation: \"h\",\r\n    // locate legend inside of plot area - otherwise plotly will preserve\r\n    // some amount of space under the plot; also this will limit legend height\r\n    // to plot's height\r\n    y: 0,\r\n    x: 0,\r\n    xanchor: \"left\",\r\n    yanchor: \"bottom\",\r\n  });\r\n\r\n  // set `overflow: visible` to svg containing legend because later we will\r\n  // position legend outside of it\r\n  fixLegendContainer(plotlyElement);\r\n\r\n  return [\r\n    pick(layout, [\"width\", \"height\", \"legend\"]),\r\n    () => {\r\n      const legend = plotlyElement.querySelector(\".legend\"); // eslint-disable-line no-shadow\r\n      if (legend) {\r\n        // compute real height of legend - items may be split into few columnns,\r\n        // also scrollbar may be shown\r\n        const bounds = legend.getBoundingClientRect();\r\n\r\n        // here we have two values:\r\n        // 1. height of plot container excluding height of legend items;\r\n        //    it may be any value between 0 and plot container's height;\r\n        // 2. half of plot containers height. Legend cannot be larger than\r\n        //    plot; if legend is too large, plotly will reduce it's height and\r\n        //    show a scrollbar; in this case, height of plot === height of legend,\r\n        //    so we can split container's height half by half between them.\r\n        layout.height = Math.floor(Math.max(layoutHeight / 2, layoutHeight - (bounds.bottom - bounds.top)));\r\n        // offset the legend\r\n        // @ts-expect-error ts-migrate(2538) FIXME: Type 'undefined' cannot be used as an index type.\r\n        legend.style[transformName] = \"translate(0, \" + layout.height + \"px)\";\r\n        return [pick(layout, [\"height\"]), null]; // no further updates\r\n      }\r\n    },\r\n  ];\r\n}\r\n\r\nfunction placeLegendAuto(plotlyElement: any, layout: any) {\r\n  if (layout.width <= 600) {\r\n    return placeLegendBelowPlot(plotlyElement, layout);\r\n  } else {\r\n    return placeLegendNextToPlot(plotlyElement, layout);\r\n  }\r\n}\r\n\r\nexport default function updateChartSize(plotlyElement: any, layout: any, options: any) {\r\n  // update layout size to plot container\r\n  // plot size should be at least 5x5px\r\n  layout.width = Math.max(5, Math.floor(plotlyElement.offsetWidth));\r\n  layout.height = Math.max(5, Math.floor(plotlyElement.offsetHeight));\r\n\r\n  const [previousWidth, previousHeight] = plotlyElement.__previousSize || [];\r\n\r\n  if (layout.width === previousWidth && layout.height === previousHeight) {\r\n    return;\r\n  }\r\n\r\n  plotlyElement.__previousSize = [layout.width, layout.height];\r\n\r\n  if (options.legend.enabled) {\r\n    switch (options.legend.placement) {\r\n      case \"auto\":\r\n        return placeLegendAuto(plotlyElement, layout);\r\n        break;\r\n      case \"below\":\r\n        return placeLegendBelowPlot(plotlyElement, layout);\r\n        break;\r\n      // no default\r\n    }\r\n  } else {\r\n    return [pick(layout, [\"width\", \"height\"]), null]; // no further updates\r\n  }\r\n}\r\n"],"file":"updateChartSize.js"}