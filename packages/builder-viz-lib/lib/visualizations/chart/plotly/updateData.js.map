{"version":3,"sources":["../../../../src/visualizations/chart/plotly/updateData.ts"],"names":["shouldUseUnifiedXAxis","options","sortX","xAxis","type","globalSeriesType","defaultFormatSeriesText","item","result","undefined","defaultFormatSeriesTextForPie","createTextFormatter","textFormat","formatValue","value","axis","axisType","yAxis","dateTimeFormat","updateSeriesText","seriesList","formatNumber","numberFormat","formatPercent","percentFormat","formatText","defaultY","missingValuesAsZero","series","seriesOptions","name","text","hover","xValues","labels","x","forEach","sourceData","get","y","row","yValueIsAny","yaxis","yError","size","percentValues","Math","abs","yPercent","$raw","push","updatePercentValues","sumOfCorrespondingPoints","Map","sum","set","yValues","getUnifiedXAxisValues","sorted","Set","add","identity","updateUnifiedXAxisValues","unifiedX","error_y","array","updatePieData","updateLineAreaData","stacking","cumulativeValues","i","stackedY","updateDefaultData","updateData","visibleSeriesList","s","visible","length"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA,SAASA,qBAAT,CAA+BC,OAA/B,EAA6C;AAC3C,SAAOA,OAAO,CAACC,KAAR,IAAiBD,OAAO,CAACE,KAAR,CAAcC,IAAd,KAAuB,UAAxC,IAAsDH,OAAO,CAACI,gBAAR,KAA6B,KAA1F;AACD;;AAED,SAASC,uBAAT,CAAiCC,IAAjC,EAA4C;AAC1C,MAAIC,MAAM,GAAGD,IAAI,CAAC,KAAD,CAAjB;;AACA,MAAIA,IAAI,CAAC,UAAD,CAAJ,KAAqBE,SAAzB,EAAoC;AAClCD,IAAAA,MAAM,aAAMA,MAAN,mBAAuBD,IAAI,CAAC,UAAD,CAA3B,CAAN;AACD;;AACD,MAAIA,IAAI,CAAC,YAAD,CAAJ,KAAuBE,SAA3B,EAAsC;AACpCD,IAAAA,MAAM,aAAMD,IAAI,CAAC,YAAD,CAAV,eAA6BC,MAA7B,MAAN;AACD;;AACD,MAAID,IAAI,CAAC,QAAD,CAAJ,KAAmBE,SAAvB,EAAkC;AAChCD,IAAAA,MAAM,aAAMA,MAAN,eAAiBD,IAAI,CAAC,QAAD,CAArB,CAAN;AACD;;AACD,SAAOC,MAAP;AACD;;AAED,SAASE,6BAAT,CAAuCH,IAAvC,EAAkD;AAChD,SAAOA,IAAI,CAAC,YAAD,CAAJ,GAAqB,IAArB,GAA4BA,IAAI,CAAC,KAAD,CAAhC,GAA0C,GAAjD;AACD;;AAED,SAASI,mBAAT,CAA6BV,OAA7B,EAA2C;AACzC,MAAIA,OAAO,CAACW,UAAR,KAAuB,EAA3B,EAA+B;AAC7B,WAAOX,OAAO,CAACI,gBAAR,KAA6B,KAA7B,GAAqCK,6BAArC,GAAqEJ,uBAA5E;AACD;;AACD,SAAQC,IAAD,IAAe,uCAAqBN,OAAO,CAACW,UAA7B,EAAyCL,IAAzC,CAAtB;AACD;;AAED,SAASM,WAAT,CAAqBC,KAArB,EAAiCC,IAAjC,EAA4Cd,OAA5C,EAA0D;AACxD,MAAIe,QAAQ,GAAG,IAAf;;AACA,UAAQD,IAAR;AACE,SAAK,GAAL;AACEC,MAAAA,QAAQ,GAAGf,OAAO,CAACE,KAAR,CAAcC,IAAzB;AACA;;AACF,SAAK,GAAL;AACEY,MAAAA,QAAQ,GAAGf,OAAO,CAACgB,KAAR,CAAc,CAAd,EAAiBb,IAA5B;AACA;;AACF,SAAK,IAAL;AACEY,MAAAA,QAAQ,GAAGf,OAAO,CAACgB,KAAR,CAAc,CAAd,EAAiBb,IAA5B;AACA;AACF;AAVF;;AAYA,SAAO,2BAAeU,KAAf,EAAsBE,QAAtB,EAAgCf,OAAO,CAACiB,cAAxC,CAAP;AACD;;AAED,SAASC,gBAAT,CAA0BC,UAA1B,EAA2CnB,OAA3C,EAAyD;AACvD,MAAMoB,YAAY,GAAG,wCAAsBpB,OAAO,CAACqB,YAA9B,CAArB;AACA,MAAMC,aAAa,GAAG,wCAAsBtB,OAAO,CAACuB,aAA9B,CAAtB;AACA,MAAMC,UAAU,GAAGd,mBAAmB,CAACV,OAAD,CAAtC;AAEA,MAAMyB,QAAQ,GAAGzB,OAAO,CAAC0B,mBAAR,GAA8B,GAA9B,GAAoC,IAArD;AAEA,oBAAKP,UAAL,EAAiBQ,MAAM,IAAI;AACzB,QAAMC,aAAa,GAAG5B,OAAO,CAAC4B,aAAR,CAAsBD,MAAM,CAACE,IAA7B,KAAsC;AAAE1B,MAAAA,IAAI,EAAEH,OAAO,CAACI;AAAhB,KAA5D;AAEAuB,IAAAA,MAAM,CAACG,IAAP,GAAc,EAAd;AACAH,IAAAA,MAAM,CAACI,KAAP,GAAe,EAAf;AACA,QAAMC,OAAO,GAAGhC,OAAO,CAACI,gBAAR,KAA6B,KAA7B,GAAqCuB,MAAM,CAACM,MAA5C,GAAqDN,MAAM,CAACO,CAA5E;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAiBD,CAAD,IAAY;AAC1B,UAAMJ,IAAI,GAAG;AACX,kBAAUH,MAAM,CAACE;AADN,OAAb;AAGA,UAAMvB,IAAI,GAAGqB,MAAM,CAACS,UAAP,CAAkBC,GAAlB,CAAsBH,CAAtB,KAA4B;AAAEA,QAAAA,CAAF;AAAKI,QAAAA,CAAC,EAAEb,QAAR;AAAkBc,QAAAA,GAAG,EAAE;AAAEL,UAAAA,CAAF;AAAKI,UAAAA,CAAC,EAAEb;AAAR;AAAvB,OAAzC;AAEA,UAAMe,WAAW,GAAG,sBAAS,CAAC,QAAD,EAAW,SAAX,CAAT,EAAgCZ,aAAa,CAACzB,IAA9C,CAApB,CAN0B,CAQ1B;AACA;AACA;AACA;AACA;AACA;;AACA2B,MAAAA,IAAI,CAAC,KAAD,CAAJ,GAAclB,WAAW,CAACN,IAAI,CAACiC,GAAL,CAASL,CAAV,EAAa,GAAb,EAAkBlC,OAAlB,CAAzB,CAd0B,CAe1B;;AACA8B,MAAAA,IAAI,CAAC,KAAD,CAAJ,GAAcU,WAAW,GAAG5B,WAAW,CAACN,IAAI,CAACiC,GAAL,CAASD,CAAV,EAAaX,MAAM,CAACc,KAApB,EAA2BzC,OAA3B,CAAd,GAAoDoB,YAAY,CAACd,IAAI,CAACgC,CAAN,CAAzF;;AACA,UAAIhC,IAAI,CAACoC,MAAL,KAAgBlC,SAApB,EAA+B;AAC7B;AACAsB,QAAAA,IAAI,CAAC,UAAD,CAAJ,GAAmBV,YAAY,CAACd,IAAI,CAACoC,MAAN,CAA/B;AACD;;AACD,UAAIpC,IAAI,CAACqC,IAAL,KAAcnC,SAAlB,EAA6B;AAC3B;AACAsB,QAAAA,IAAI,CAAC,QAAD,CAAJ,GAAiBV,YAAY,CAACd,IAAI,CAACqC,IAAN,CAA7B;AACD;;AAED,UAAI3C,OAAO,CAAC2B,MAAR,CAAeiB,aAAf,IAAgC5C,OAAO,CAACI,gBAAR,KAA6B,KAAjE,EAAwE;AACtE;AACA0B,QAAAA,IAAI,CAAC,YAAD,CAAJ,GAAqBR,aAAa,CAACuB,IAAI,CAACC,GAAL,CAASxC,IAAI,CAACyC,QAAd,CAAD,CAAlC;AACD;;AAED,0BAAOjB,IAAP,EAAaxB,IAAI,CAACiC,GAAL,CAASS,IAAtB;AAEArB,MAAAA,MAAM,CAACG,IAAP,CAAYmB,IAAZ,CAAiBzB,UAAU,CAACM,IAAD,CAA3B;AACD,KAlCD;AAmCD,GAzCD;AA0CD;;AAED,SAASoB,mBAAT,CAA6B/B,UAA7B,EAA8CnB,OAA9C,EAA4D;AAC1D,MAAIA,OAAO,CAAC2B,MAAR,CAAeiB,aAAnB,EAAkC;AAChC;AACA;AACA,QAAMO,wBAAwB,GAAG,IAAIC,GAAJ,EAAjC;AACA,sBAAKjC,UAAL,EAAiBQ,MAAM,IAAI;AACzBA,MAAAA,MAAM,CAACS,UAAP,CAAkBD,OAAlB,CAA2B7B,IAAD,IAAe;AACvC,YAAM+C,GAAG,GAAGF,wBAAwB,CAACd,GAAzB,CAA6B/B,IAAI,CAAC4B,CAAlC,KAAwC,CAApD;AACAiB,QAAAA,wBAAwB,CAACG,GAAzB,CAA6BhD,IAAI,CAAC4B,CAAlC,EAAqCmB,GAAG,GAAGR,IAAI,CAACC,GAAL,CAASxC,IAAI,CAACgC,CAAL,IAAU,GAAnB,CAA3C;AACD,OAHD;AAID,KALD;AAOA,sBAAKnB,UAAL,EAAiBQ,MAAM,IAAI;AACzB,UAAM4B,OAAY,GAAG,EAArB;AAEA5B,MAAAA,MAAM,CAACS,UAAP,CAAkBD,OAAlB,CAA2B7B,IAAD,IAAe;AACvC,YAAI,mBAAMA,IAAI,CAACgC,CAAX,KAAiB,CAACtC,OAAO,CAAC0B,mBAA9B,EAAmD;AACjDpB,UAAAA,IAAI,CAACyC,QAAL,GAAgB,IAAhB;AACD,SAFD,MAEO;AACL,cAAMM,GAAG,GAAGF,wBAAwB,CAACd,GAAzB,CAA6B/B,IAAI,CAAC4B,CAAlC,CAAZ;AACA5B,UAAAA,IAAI,CAACyC,QAAL,GAAiBzC,IAAI,CAACgC,CAAL,GAASe,GAAV,GAAiB,GAAjC;AACD;;AACDE,QAAAA,OAAO,CAACN,IAAR,CAAa3C,IAAI,CAACyC,QAAlB;AACD,OARD;AAUApB,MAAAA,MAAM,CAACW,CAAP,GAAWiB,OAAX;AACD,KAdD;AAeD;AACF;;AAED,SAASC,qBAAT,CAA+BrC,UAA/B,EAAgDsC,MAAhD,EAA6D;AAC3D,MAAMH,GAAG,GAAG,IAAII,GAAJ,EAAZ;AACA,oBAAKvC,UAAL,EAAiBQ,MAAM,IAAI;AACzB;AACAA,IAAAA,MAAM,CAACS,UAAP,CAAkBD,OAAlB,CAA2B7B,IAAD,IAAe;AACvCgD,MAAAA,GAAG,CAACK,GAAJ,CAAQrD,IAAI,CAAC4B,CAAb;AACD,KAFD;AAGD,GALD;AAOA,MAAM3B,MAAM,GAAG,CAAC,GAAG+C,GAAJ,CAAf;AACA,SAAOG,MAAM,GAAG,oBAAOlD,MAAP,EAAeqD,gBAAf,CAAH,GAA8BrD,MAA3C;AACD;;AAED,SAASsD,wBAAT,CAAkC1C,UAAlC,EAAmDnB,OAAnD,EAAiE;AAC/D,MAAM8D,QAAQ,GAAGN,qBAAqB,CAACrC,UAAD,EAAanB,OAAO,CAACC,KAArB,CAAtC;AACA,MAAMwB,QAAQ,GAAGzB,OAAO,CAAC0B,mBAAR,GAA8B,GAA9B,GAAoC,IAArD;AACA,oBAAKP,UAAL,EAAiBQ,MAAM,IAAI;AACzBA,IAAAA,MAAM,CAACO,CAAP,GAAW,EAAX;AACAP,IAAAA,MAAM,CAACW,CAAP,GAAW,EAAX;AACAX,IAAAA,MAAM,CAACoC,OAAP,CAAeC,KAAf,GAAuB,EAAvB;AACA,sBAAKF,QAAL,EAAe5B,CAAC,IAAI;AAClBP,MAAAA,MAAM,CAACO,CAAP,CAASe,IAAT,CAAcf,CAAd;AACA,UAAM5B,IAAI,GAAGqB,MAAM,CAACS,UAAP,CAAkBC,GAAlB,CAAsBH,CAAtB,CAAb;;AACA,UAAI5B,IAAJ,EAAU;AACRqB,QAAAA,MAAM,CAACW,CAAP,CAASW,IAAT,CAAcjD,OAAO,CAAC2B,MAAR,CAAeiB,aAAf,GAA+BtC,IAAI,CAACyC,QAApC,GAA+CzC,IAAI,CAACgC,CAAlE;AACAX,QAAAA,MAAM,CAACoC,OAAP,CAAeC,KAAf,CAAqBf,IAArB,CAA0B3C,IAAI,CAACoC,MAA/B;AACD,OAHD,MAGO;AACLf,QAAAA,MAAM,CAACW,CAAP,CAASW,IAAT,CAAcxB,QAAd;AACAE,QAAAA,MAAM,CAACoC,OAAP,CAAeC,KAAf,CAAqBf,IAArB,CAA0B,IAA1B;AACD;AACF,KAVD;AAWD,GAfD;AAgBD;;AAED,SAASgB,aAAT,CAAuB9C,UAAvB,EAAwCnB,OAAxC,EAAsD;AACpDkB,EAAAA,gBAAgB,CAACC,UAAD,EAAanB,OAAb,CAAhB;AACD;;AAED,SAASkE,kBAAT,CAA4B/C,UAA5B,EAA6CnB,OAA7C,EAA2D;AACzD;AACAkD,EAAAA,mBAAmB,CAAC/B,UAAD,EAAanB,OAAb,CAAnB;;AACA,MAAIA,OAAO,CAAC2B,MAAR,CAAewC,QAAnB,EAA6B;AAC3BN,IAAAA,wBAAwB,CAAC1C,UAAD,EAAanB,OAAb,CAAxB,CAD2B,CAG3B;;AACA,QAAMoE,gBAAgB,GAAG,EAAzB;AACA,sBAAKjD,UAAL,EAAiBQ,MAAM,IAAI;AACzBA,MAAAA,MAAM,CAACW,CAAP,GAAW,iBAAIX,MAAM,CAACW,CAAX,EAAc,CAACA,CAAD,EAAI+B,CAAJ,KAAU;AACjC,YAAI,mBAAM/B,CAAN,KAAY,CAACtC,OAAO,CAAC0B,mBAAzB,EAA8C;AAC5C,iBAAO,IAAP;AACD;;AACD,YAAMQ,CAAC,GAAGP,MAAM,CAACO,CAAP,CAASmC,CAAT,CAAV,CAJiC,CAKjC;;AACA,YAAMC,QAAQ,GAAGhC,CAAC,IAAI8B,gBAAgB,CAAClC,CAAD,CAAhB,IAAuB,GAA3B,CAAlB,CANiC,CAOjC;;AACAkC,QAAAA,gBAAgB,CAAClC,CAAD,CAAhB,GAAsBoC,QAAtB;AACA,eAAOA,QAAP;AACD,OAVU,CAAX;AAWD,KAZD;AAaD,GAlBD,MAkBO;AACL,QAAIvE,qBAAqB,CAACC,OAAD,CAAzB,EAAoC;AAClC6D,MAAAA,wBAAwB,CAAC1C,UAAD,EAAanB,OAAb,CAAxB;AACD;AACF,GAzBwD,CA2BzD;;;AACAkB,EAAAA,gBAAgB,CAACC,UAAD,EAAanB,OAAb,CAAhB;AACD;;AAED,SAASuE,iBAAT,CAA2BpD,UAA3B,EAA4CnB,OAA5C,EAA0D;AACxD;AACAkD,EAAAA,mBAAmB,CAAC/B,UAAD,EAAanB,OAAb,CAAnB;;AAEA,MAAI,CAACA,OAAO,CAAC2B,MAAR,CAAewC,QAApB,EAA8B;AAC5B,QAAIpE,qBAAqB,CAACC,OAAD,CAAzB,EAAoC;AAClC6D,MAAAA,wBAAwB,CAAC1C,UAAD,EAAanB,OAAb,CAAxB;AACD;AACF,GARuD,CAUxD;;;AACAkB,EAAAA,gBAAgB,CAACC,UAAD,EAAanB,OAAb,CAAhB;AACD;;AAEc,SAASwE,UAAT,CAAoBrD,UAApB,EAAqCnB,OAArC,EAAmD;AAChE;AACA,MAAMyE,iBAAiB,GAAG,oBAAOtD,UAAP,EAAmBuD,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAc,IAAtC,CAA1B;;AAEA,MAAIF,iBAAiB,CAACG,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,YAAQ5E,OAAO,CAACI,gBAAhB;AACE,WAAK,KAAL;AACE6D,QAAAA,aAAa,CAACQ,iBAAD,EAAoBzE,OAApB,CAAb;AACA;;AACF,WAAK,MAAL;AACA,WAAK,MAAL;AACEkE,QAAAA,kBAAkB,CAACO,iBAAD,EAAoBzE,OAApB,CAAlB;AACA;;AACF,WAAK,SAAL;AACE;;AACF;AACEuE,QAAAA,iBAAiB,CAACE,iBAAD,EAAoBzE,OAApB,CAAjB;AACA;AAZJ;AAcD;;AACD,SAAOmB,UAAP;AACD","sourcesContent":["import { isNil, each, extend, filter, identity, includes, map, sortBy } from \"lodash\";\r\nimport { createNumberFormatter, formatSimpleTemplate } from \"@/lib/value-format\";\r\nimport { normalizeValue } from \"./utils\";\r\n\r\nfunction shouldUseUnifiedXAxis(options: any) {\r\n  return options.sortX && options.xAxis.type === \"category\" && options.globalSeriesType !== \"box\";\r\n}\r\n\r\nfunction defaultFormatSeriesText(item: any) {\r\n  let result = item[\"@@y\"];\r\n  if (item[\"@@yError\"] !== undefined) {\r\n    result = `${result} \\u00B1 ${item[\"@@yError\"]}`;\r\n  }\r\n  if (item[\"@@yPercent\"] !== undefined) {\r\n    result = `${item[\"@@yPercent\"]} (${result})`;\r\n  }\r\n  if (item[\"@@size\"] !== undefined) {\r\n    result = `${result}: ${item[\"@@size\"]}`;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction defaultFormatSeriesTextForPie(item: any) {\r\n  return item[\"@@yPercent\"] + \" (\" + item[\"@@y\"] + \")\";\r\n}\r\n\r\nfunction createTextFormatter(options: any) {\r\n  if (options.textFormat === \"\") {\r\n    return options.globalSeriesType === \"pie\" ? defaultFormatSeriesTextForPie : defaultFormatSeriesText;\r\n  }\r\n  return (item: any) => formatSimpleTemplate(options.textFormat, item);\r\n}\r\n\r\nfunction formatValue(value: any, axis: any, options: any) {\r\n  let axisType = null;\r\n  switch (axis) {\r\n    case \"x\":\r\n      axisType = options.xAxis.type;\r\n      break;\r\n    case \"y\":\r\n      axisType = options.yAxis[0].type;\r\n      break;\r\n    case \"y2\":\r\n      axisType = options.yAxis[1].type;\r\n      break;\r\n    // no default\r\n  }\r\n  return normalizeValue(value, axisType, options.dateTimeFormat);\r\n}\r\n\r\nfunction updateSeriesText(seriesList: any, options: any) {\r\n  const formatNumber = createNumberFormatter(options.numberFormat);\r\n  const formatPercent = createNumberFormatter(options.percentFormat);\r\n  const formatText = createTextFormatter(options);\r\n\r\n  const defaultY = options.missingValuesAsZero ? 0.0 : null;\r\n\r\n  each(seriesList, series => {\r\n    const seriesOptions = options.seriesOptions[series.name] || { type: options.globalSeriesType };\r\n\r\n    series.text = [];\r\n    series.hover = [];\r\n    const xValues = options.globalSeriesType === \"pie\" ? series.labels : series.x;\r\n    xValues.forEach((x: any) => {\r\n      const text = {\r\n        \"@@name\": series.name,\r\n      };\r\n      const item = series.sourceData.get(x) || { x, y: defaultY, row: { x, y: defaultY } };\r\n\r\n      const yValueIsAny = includes([\"bubble\", \"scatter\"], seriesOptions.type);\r\n\r\n      // for `formatValue` we have to use original value of `x` and `y`: `item.x`/`item.y` contains value\r\n      // already processed with `normalizeValue`, and if they were `moment` instances - they are formatted\r\n      // using default (ISO) date/time format. Here we need to use custom date/time format, so we pass original value\r\n      // to `formatValue` which will call `normalizeValue` again, but this time with different date/time format\r\n      // (if needed)\r\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n      text[\"@@x\"] = formatValue(item.row.x, \"x\", options);\r\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n      text[\"@@y\"] = yValueIsAny ? formatValue(item.row.y, series.yaxis, options) : formatNumber(item.y);\r\n      if (item.yError !== undefined) {\r\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n        text[\"@@yError\"] = formatNumber(item.yError);\r\n      }\r\n      if (item.size !== undefined) {\r\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n        text[\"@@size\"] = formatNumber(item.size);\r\n      }\r\n\r\n      if (options.series.percentValues || options.globalSeriesType === \"pie\") {\r\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n        text[\"@@yPercent\"] = formatPercent(Math.abs(item.yPercent));\r\n      }\r\n\r\n      extend(text, item.row.$raw);\r\n\r\n      series.text.push(formatText(text));\r\n    });\r\n  });\r\n}\r\n\r\nfunction updatePercentValues(seriesList: any, options: any) {\r\n  if (options.series.percentValues) {\r\n    // Some series may not have corresponding x-values;\r\n    // do calculations for each x only for series that do have that x\r\n    const sumOfCorrespondingPoints = new Map();\r\n    each(seriesList, series => {\r\n      series.sourceData.forEach((item: any) => {\r\n        const sum = sumOfCorrespondingPoints.get(item.x) || 0;\r\n        sumOfCorrespondingPoints.set(item.x, sum + Math.abs(item.y || 0.0));\r\n      });\r\n    });\r\n\r\n    each(seriesList, series => {\r\n      const yValues: any = [];\r\n\r\n      series.sourceData.forEach((item: any) => {\r\n        if (isNil(item.y) && !options.missingValuesAsZero) {\r\n          item.yPercent = null;\r\n        } else {\r\n          const sum = sumOfCorrespondingPoints.get(item.x);\r\n          item.yPercent = (item.y / sum) * 100;\r\n        }\r\n        yValues.push(item.yPercent);\r\n      });\r\n\r\n      series.y = yValues;\r\n    });\r\n  }\r\n}\r\n\r\nfunction getUnifiedXAxisValues(seriesList: any, sorted: any) {\r\n  const set = new Set();\r\n  each(seriesList, series => {\r\n    // `Map.forEach` will walk items in insertion order\r\n    series.sourceData.forEach((item: any) => {\r\n      set.add(item.x);\r\n    });\r\n  });\r\n\r\n  const result = [...set];\r\n  return sorted ? sortBy(result, identity) : result;\r\n}\r\n\r\nfunction updateUnifiedXAxisValues(seriesList: any, options: any) {\r\n  const unifiedX = getUnifiedXAxisValues(seriesList, options.sortX);\r\n  const defaultY = options.missingValuesAsZero ? 0.0 : null;\r\n  each(seriesList, series => {\r\n    series.x = [];\r\n    series.y = [];\r\n    series.error_y.array = [];\r\n    each(unifiedX, x => {\r\n      series.x.push(x);\r\n      const item = series.sourceData.get(x);\r\n      if (item) {\r\n        series.y.push(options.series.percentValues ? item.yPercent : item.y);\r\n        series.error_y.array.push(item.yError);\r\n      } else {\r\n        series.y.push(defaultY);\r\n        series.error_y.array.push(null);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction updatePieData(seriesList: any, options: any) {\r\n  updateSeriesText(seriesList, options);\r\n}\r\n\r\nfunction updateLineAreaData(seriesList: any, options: any) {\r\n  // Apply \"percent values\" modification\r\n  updatePercentValues(seriesList, options);\r\n  if (options.series.stacking) {\r\n    updateUnifiedXAxisValues(seriesList, options);\r\n\r\n    // Calculate cumulative value for each x tick\r\n    const cumulativeValues = {};\r\n    each(seriesList, series => {\r\n      series.y = map(series.y, (y, i) => {\r\n        if (isNil(y) && !options.missingValuesAsZero) {\r\n          return null;\r\n        }\r\n        const x = series.x[i];\r\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n        const stackedY = y + (cumulativeValues[x] || 0.0);\r\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\r\n        cumulativeValues[x] = stackedY;\r\n        return stackedY;\r\n      });\r\n    });\r\n  } else {\r\n    if (shouldUseUnifiedXAxis(options)) {\r\n      updateUnifiedXAxisValues(seriesList, options);\r\n    }\r\n  }\r\n\r\n  // Finally - update text labels\r\n  updateSeriesText(seriesList, options);\r\n}\r\n\r\nfunction updateDefaultData(seriesList: any, options: any) {\r\n  // Apply \"percent values\" modification\r\n  updatePercentValues(seriesList, options);\r\n\r\n  if (!options.series.stacking) {\r\n    if (shouldUseUnifiedXAxis(options)) {\r\n      updateUnifiedXAxisValues(seriesList, options);\r\n    }\r\n  }\r\n\r\n  // Finally - update text labels\r\n  updateSeriesText(seriesList, options);\r\n}\r\n\r\nexport default function updateData(seriesList: any, options: any) {\r\n  // Use only visible series\r\n  const visibleSeriesList = filter(seriesList, s => s.visible === true);\r\n\r\n  if (visibleSeriesList.length > 0) {\r\n    switch (options.globalSeriesType) {\r\n      case \"pie\":\r\n        updatePieData(visibleSeriesList, options);\r\n        break;\r\n      case \"line\":\r\n      case \"area\":\r\n        updateLineAreaData(visibleSeriesList, options);\r\n        break;\r\n      case \"heatmap\":\r\n        break;\r\n      default:\r\n        updateDefaultData(visibleSeriesList, options);\r\n        break;\r\n    }\r\n  }\r\n  return seriesList;\r\n}\r\n"],"file":"updateData.js"}