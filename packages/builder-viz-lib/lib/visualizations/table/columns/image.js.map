{"version":3,"sources":["../../../../src/visualizations/table/columns/image.tsx"],"names":["Editor","column","onChange","onChangeDebounced","imageUrlTemplate","event","target","value","marginBottom","imageWidth","imageHeight","imageTitleTemplate","cursor","ContextHelp","defaultIcon","initImageColumn","prepareData","row","name","src","width","parseInt","height","title","result","Number","isFinite","text","alt","ImageColumn","props","friendlyName"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAaA,SAASA,MAAT,OAA6C;AAAA,MAA3BC,MAA2B,QAA3BA,MAA2B;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;;AAAA,8BACf,uCAAqBA,QAArB,EAA+B,GAA/B,CADe;AAAA;AAAA,MACpCC,iBADoC;;AAG3C,sBACE,6BAAC,cAAD,CAAO,QAAP,qBAEE,6BAAC,eAAD,qBACE,6BAAC,aAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,iBAAU,sCAFZ;AAGE,IAAA,YAAY,EAAEF,MAAM,CAACG,gBAHvB;AAIE,IAAA,QAAQ,EAAGC,KAAD,IAAgBF,iBAAiB,CAAC;AAAEC,MAAAA,gBAAgB,EAAEC,KAAK,CAACC,MAAN,CAAaC;AAAjC,KAAD;AAJ7C,IADF,CAFF,eAYE,6BAAC,eAAD,qBACE,6BAAC,oBAAD,CACE;AADF;AAEE,IAAA,KAAK,eACH,6BAAC,cAAD,CAAO,QAAP,6BAGE,6BAAC,mBAAD;AAAa,MAAA,SAAS,EAAC,SAAvB;AAAiC,MAAA,kBAAkB;AAAnD,oBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB;AAAZ,mEADF,eAEE,8EAFF,CAHF;AAHJ,kBAaE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE,6BAAC,aAAD;AACE,iBAAU,gCADZ;AAEE,IAAA,WAAW,EAAC,OAFd;AAGE,IAAA,YAAY,EAAEP,MAAM,CAACQ,UAHvB;AAIE,IAAA,QAAQ,EAAGJ,KAAD,IAAgBF,iBAAiB,CAAC;AAAEM,MAAAA,UAAU,EAAEJ,KAAK,CAACC,MAAN,CAAaC;AAA3B,KAAD;AAJ7C,IADF,eAOE;AAAM,IAAA,SAAS,EAAC;AAAhB,YAPF,eAQE,6BAAC,aAAD;AACE,iBAAU,iCADZ;AAEE,IAAA,WAAW,EAAC,QAFd;AAGE,IAAA,YAAY,EAAEN,MAAM,CAACS,WAHvB;AAIE,IAAA,QAAQ,EAAGL,KAAD,IAAgBF,iBAAiB,CAAC;AAAEO,MAAAA,WAAW,EAAEL,KAAK,CAACC,MAAN,CAAaC;AAA5B,KAAD;AAJ7C,IARF,CAbF,CADF,CAZF,eA6CE,6BAAC,eAAD,qBACE,6BAAC,aAAD;AACE,IAAA,KAAK,EAAC,gBADR;AAEE,iBAAU,wCAFZ;AAGE,IAAA,YAAY,EAAEN,MAAM,CAACU,kBAHvB;AAIE,IAAA,QAAQ,EAAGN,KAAD,IAAgBF,iBAAiB,CAAC;AAAEQ,MAAAA,kBAAkB,EAAEN,KAAK,CAACC,MAAN,CAAaC;AAAnC,KAAD;AAJ7C,IADF,CA7CF,eAuDE,6BAAC,eAAD,qBAEE,6BAAC,mBAAD;AACE,IAAA,SAAS,EAAC,SADZ;AAEE,IAAA,kBAAkB,MAFpB,CAGE;AAHF;AAIE,IAAA,IAAI,eAAE;AAAM,MAAA,KAAK,EAAE;AAAEK,QAAAA,MAAM,EAAE;AAAV;AAAb,wBAAkDC,oBAAYC,WAA9D;AAJR,kBAKE,+FACsC,2CAAO,mBAAP,CADtC,aALF,eAQE,+DACM,2CAAO,SAAP,CADN,yCARF,eAWE,sGAXF,CAFF,CAvDF,CADF;AA0ED;;AAEc,SAASC,eAAT,CAAyBd,MAAzB,EAAsC;AACnD,WAASe,WAAT,CAAqBC,GAArB,EAA+B;AAC7BA,IAAAA,GAAG,GAAG,oBAAO;AAAE,WAAKA,GAAG,CAAChB,MAAM,CAACiB,IAAR;AAAV,KAAP,EAAkCD,GAAlC,CAAN;AAEA,QAAME,GAAG,GAAG,kBAAK,uCAAqBlB,MAAM,CAACG,gBAA5B,EAA8Ca,GAA9C,CAAL,CAAZ;;AACA,QAAIE,GAAG,KAAK,EAAZ,EAAgB;AACd,aAAO,EAAP;AACD;;AAED,QAAMC,KAAK,GAAGC,QAAQ,CAAC,uCAAqBpB,MAAM,CAACQ,UAA5B,EAAwCQ,GAAxC,CAAD,EAA+C,EAA/C,CAAtB;AACA,QAAMK,MAAM,GAAGD,QAAQ,CAAC,uCAAqBpB,MAAM,CAACS,WAA5B,EAAyCO,GAAzC,CAAD,EAAgD,EAAhD,CAAvB;AACA,QAAMM,KAAK,GAAG,kBAAK,uCAAqBtB,MAAM,CAACU,kBAA5B,EAAgDM,GAAhD,CAAL,CAAd;AAEA,QAAMO,MAAM,GAAG;AAAEL,MAAAA;AAAF,KAAf;;AAEA,QAAIM,MAAM,CAACC,QAAP,CAAgBN,KAAhB,KAA0BA,KAAK,GAAG,CAAtC,EAAyC;AACvC;AACAI,MAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAf;AACD;;AACD,QAAIK,MAAM,CAACC,QAAP,CAAgBJ,MAAhB,KAA2BA,MAAM,GAAG,CAAxC,EAA2C;AACzC;AACAE,MAAAA,MAAM,CAACF,MAAP,GAAgBA,MAAhB;AACD;;AACD,QAAIC,KAAK,KAAK,EAAd,EAAkB;AAChB;AACAC,MAAAA,MAAM,CAACG,IAAP,GAAcJ,KAAd,CAFgB,CAEK;AACrB;;AACAC,MAAAA,MAAM,CAACD,KAAP,GAAeA,KAAf,CAJgB,CAKhB;;AACAC,MAAAA,MAAM,CAACI,GAAP,GAAaL,KAAb;AACD;;AAED,WAAOC,MAAP;AACD;;AAED,WAASK,WAAT,QAAmC;AAAA,QAAZZ,GAAY,SAAZA,GAAY;;AACjC;AACA;AAFiC,uBAGND,WAAW,CAACC,GAAD,CAHL;AAAA,QAGzBU,IAHyB,gBAGzBA,IAHyB;AAAA,QAGhBG,KAHgB;;AAIjC,wBAAO;AAAK,MAAA,GAAG,EAAC;AAAT,OAAgBA,KAAhB,EAAP;AACD;;AAEDD,EAAAA,WAAW,CAACb,WAAZ,GAA0BA,WAA1B;AAEA,SAAOa,WAAP;AACD;;AAEDd,eAAe,CAACgB,YAAhB,GAA+B,OAA/B;AACAhB,eAAe,CAACf,MAAhB,GAAyBA,MAAzB","sourcesContent":["import { extend, trim } from \"lodash\";\r\nimport React from \"react\";\r\nimport { useDebouncedCallback } from \"use-debounce\";\r\nimport { Section, Input, ControlLabel, ContextHelp } from \"@/components/visualizations/editor\";\r\nimport { formatSimpleTemplate } from \"@/lib/value-format\";\r\n\r\ntype Props = {\r\n  column: {\r\n    name: string;\r\n    imageUrlTemplate?: string;\r\n    imageWidth?: string;\r\n    imageHeight?: string;\r\n    imageTitleTemplate?: string;\r\n  };\r\n  onChange: (...args: any[]) => any;\r\n};\r\n\r\nfunction Editor({ column, onChange }: Props) {\r\n  const [onChangeDebounced] = useDebouncedCallback(onChange, 200);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Input\r\n          label=\"URL template\"\r\n          data-test=\"Table.ColumnEditor.Image.UrlTemplate\"\r\n          defaultValue={column.imageUrlTemplate}\r\n          onChange={(event: any) => onChangeDebounced({ imageUrlTemplate: event.target.value })}\r\n        />\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <ControlLabel\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message\r\n          label={\r\n            <React.Fragment>\r\n              Size\r\n              {/* @ts-expect-error ts-migrate(2746) FIXME: This JSX tag's 'children' prop expects a single ch... Remove this comment to see the full error message */}\r\n              <ContextHelp placement=\"topLeft\" arrowPointAtCenter>\r\n                <div style={{ marginBottom: 5 }}>Any positive integer value that specifies size in pixels.</div>\r\n                <div>Leave empty to use default value.</div>\r\n              </ContextHelp>\r\n            </React.Fragment>\r\n          }>\r\n          {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message */}\r\n          <div className=\"image-dimension-selector\">\r\n            <Input\r\n              data-test=\"Table.ColumnEditor.Image.Width\"\r\n              placeholder=\"Width\"\r\n              defaultValue={column.imageWidth}\r\n              onChange={(event: any) => onChangeDebounced({ imageWidth: event.target.value })}\r\n            />\r\n            <span className=\"image-dimension-selector-spacer\">&times;</span>\r\n            <Input\r\n              data-test=\"Table.ColumnEditor.Image.Height\"\r\n              placeholder=\"Height\"\r\n              defaultValue={column.imageHeight}\r\n              onChange={(event: any) => onChangeDebounced({ imageHeight: event.target.value })}\r\n            />\r\n          </div>\r\n        </ControlLabel>\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        <Input\r\n          label=\"Title template\"\r\n          data-test=\"Table.ColumnEditor.Image.TitleTemplate\"\r\n          defaultValue={column.imageTitleTemplate}\r\n          onChange={(event: any) => onChangeDebounced({ imageTitleTemplate: event.target.value })}\r\n        />\r\n      </Section>\r\n\r\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\r\n      <Section>\r\n        {/* @ts-expect-error ts-migrate(2746) FIXME: This JSX tag's 'children' prop expects a single ch... Remove this comment to see the full error message */}\r\n        <ContextHelp\r\n          placement=\"topLeft\"\r\n          arrowPointAtCenter\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message\r\n          icon={<span style={{ cursor: \"default\" }}>Format specs {ContextHelp.defaultIcon}</span>}>\r\n          <div>\r\n            All columns can be referenced using <code>{\"{{ column_name }}\"}</code> syntax.\r\n          </div>\r\n          <div>\r\n            Use <code>{\"{{ @ }}\"}</code> to reference current (this) column.\r\n          </div>\r\n          <div>This syntax is applicable to URL, Title and Size options.</div>\r\n        </ContextHelp>\r\n      </Section>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default function initImageColumn(column: any) {\r\n  function prepareData(row: any) {\r\n    row = extend({ \"@\": row[column.name] }, row);\r\n\r\n    const src = trim(formatSimpleTemplate(column.imageUrlTemplate, row));\r\n    if (src === \"\") {\r\n      return {};\r\n    }\r\n\r\n    const width = parseInt(formatSimpleTemplate(column.imageWidth, row), 10);\r\n    const height = parseInt(formatSimpleTemplate(column.imageHeight, row), 10);\r\n    const title = trim(formatSimpleTemplate(column.imageTitleTemplate, row));\r\n\r\n    const result = { src };\r\n\r\n    if (Number.isFinite(width) && width > 0) {\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'width' does not exist on type '{ src: st... Remove this comment to see the full error message\r\n      result.width = width;\r\n    }\r\n    if (Number.isFinite(height) && height > 0) {\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'height' does not exist on type '{ src: s... Remove this comment to see the full error message\r\n      result.height = height;\r\n    }\r\n    if (title !== \"\") {\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'text' does not exist on type '{ src: str... Remove this comment to see the full error message\r\n      result.text = title; // `text` is used for search\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'title' does not exist on type '{ src: st... Remove this comment to see the full error message\r\n      result.title = title;\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'alt' does not exist on type '{ src: stri... Remove this comment to see the full error message\r\n      result.alt = title;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function ImageColumn({ row }: any) {\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'text' does not exist on type '{}'.\r\n    // eslint-disable-line react/prop-types\r\n    const { text, ...props } = prepareData(row);\r\n    return <img alt=\"\" {...props} />;\r\n  }\r\n\r\n  ImageColumn.prepareData = prepareData;\r\n\r\n  return ImageColumn;\r\n}\r\n\r\ninitImageColumn.friendlyName = \"Image\";\r\ninitImageColumn.Editor = Editor;\r\n"],"file":"image.js"}