{"version":3,"sources":["../../../src/visualizations/table/Renderer.tsx"],"names":["joinColumns","array","separator","result","item","index","push","getSearchColumns","columns","limit","Infinity","renderColumn","col","title","firstColumns","slice","restColumns","length","SearchInputInfoIcon","searchColumns","name","SearchInput","props","searchColumnsLimit","join","defaultProps","onChange","Renderer","options","data","searchTerm","setSearchTerm","orderBy","setOrderBy","tableColumns","searchInput","event","target","value","newOrderBy","document","getSelection","removeAllRanges","preparedRows","rows","size","position","pageSize","itemsPerPage","hideOnSinglePage","showSizeChanger","propTypes","RendererPropTypes"],"mappings":"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","sourcesContent":["import { filter, map, get, initial, last, reduce } from \"lodash\";\r\nimport React, { useMemo, useState, useEffect } from \"react\";\r\nimport Table from \"antd/lib/table\";\r\nimport Input from \"antd/lib/input\";\r\nimport InfoCircleFilledIcon from \"@ant-design/icons/InfoCircleFilled\";\r\nimport Popover from \"antd/lib/popover\";\r\nimport { RendererPropTypes } from \"@/visualizations/prop-types\";\r\n\r\nimport { prepareColumns, initRows, filterRows, sortRows } from \"./utils\";\r\n\r\nimport \"./renderer.less\";\r\n\r\nfunction joinColumns(array: any, separator = \", \") {\r\n  return reduce(\r\n    array,\r\n    (result, item, index) => {\r\n      // @ts-expect-error ts-migrate(2365) FIXME: Operator '>' cannot be applied to types 'string' a... Remove this comment to see the full error message\r\n      if (index > 0) {\r\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'string' is not assignable to par... Remove this comment to see the full error message\r\n        result.push(separator);\r\n      }\r\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'any' is not assignable to parame... Remove this comment to see the full error message\r\n      result.push(item);\r\n      return result;\r\n    },\r\n    []\r\n  );\r\n}\r\n\r\nfunction getSearchColumns(columns: any, { limit = Infinity, renderColumn = (col: any) => col.title } = {}) {\r\n  const firstColumns = map(columns.slice(0, limit), col => renderColumn(col));\r\n  const restColumns = map(columns.slice(limit), col => col.title);\r\n  if (restColumns.length > 0) {\r\n    return [...joinColumns(firstColumns), ` and ${restColumns.length} others`];\r\n  }\r\n  if (firstColumns.length > 1) {\r\n    return [...joinColumns(initial(firstColumns)), ` and `, last(firstColumns)];\r\n  }\r\n  return firstColumns;\r\n}\r\n\r\nfunction SearchInputInfoIcon({ searchColumns }: any) {\r\n  return (\r\n    <Popover\r\n      arrowPointAtCenter\r\n      placement=\"topRight\"\r\n      content={\r\n        <div className=\"table-visualization-search-info-content\">\r\n          Search {getSearchColumns(searchColumns, { renderColumn: col => <code key={col.name}>{col.title}</code> })}\r\n        </div>\r\n      }>\r\n      <InfoCircleFilledIcon className=\"table-visualization-search-info-icon\" />\r\n    </Popover>\r\n  );\r\n}\r\n\r\ntype OwnSearchInputProps = {\r\n  onChange?: (...args: any[]) => any;\r\n};\r\n\r\ntype SearchInputProps = OwnSearchInputProps & typeof SearchInput.defaultProps;\r\n\r\n// @ts-expect-error ts-migrate(2339) FIXME: Property 'searchColumns' does not exist on type 'S... Remove this comment to see the full error message\r\nfunction SearchInput({ searchColumns, ...props }: SearchInputProps) {\r\n  if (searchColumns.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  const searchColumnsLimit = 3;\r\n  return (\r\n    <Input.Search\r\n      {...props}\r\n      placeholder={`Search ${getSearchColumns(searchColumns, { limit: searchColumnsLimit }).join(\"\")}...`}\r\n      suffix={searchColumns.length > searchColumnsLimit ? <SearchInputInfoIcon searchColumns={searchColumns} /> : null}\r\n    />\r\n  );\r\n}\r\n\r\nSearchInput.defaultProps = {\r\n  onChange: () => {},\r\n};\r\n\r\nexport default function Renderer({ options, data }: any) {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [orderBy, setOrderBy] = useState([]);\r\n\r\n  const searchColumns = useMemo(() => filter(options.columns, \"allowSearch\"), [options.columns]);\r\n\r\n  const tableColumns = useMemo(() => {\r\n    const searchInput =\r\n      searchColumns.length > 0 ? (\r\n        // @ts-expect-error ts-migrate(2322) FIXME: Type '(event: any) => void' is not assignable to t... Remove this comment to see the full error message\r\n        <SearchInput searchColumns={searchColumns} onChange={(event: any) => setSearchTerm(event.target.value)} />\r\n      ) : null;\r\n    return prepareColumns(options.columns, searchInput, orderBy, (newOrderBy: any) => {\r\n      setOrderBy(newOrderBy);\r\n      // Remove text selection - may occur accidentally\r\n      // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\r\n      document.getSelection().removeAllRanges();\r\n    });\r\n  }, [options.columns, searchColumns, orderBy]);\r\n\r\n  const preparedRows = useMemo(() => sortRows(filterRows(initRows(data.rows), searchTerm, searchColumns), orderBy), [\r\n    data.rows,\r\n    searchTerm,\r\n    searchColumns,\r\n    orderBy,\r\n  ]);\r\n\r\n  // If data or config columns change - reset sorting\r\n  useEffect(() => {\r\n    setOrderBy([]);\r\n  }, [options.columns, data.columns]);\r\n\r\n  if (data.rows.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"table-visualization-container\">\r\n      <Table\r\n        className=\"table-fixed-header\"\r\n        data-percy=\"show-scrollbars\"\r\n        data-test=\"TableVisualization\"\r\n        // @ts-expect-error ts-migrate(2322) FIXME: Type '{ key: any; dataIndex: string; align: any; s... Remove this comment to see the full error message\r\n        columns={tableColumns}\r\n        dataSource={preparedRows}\r\n        pagination={{\r\n          size: get(options, \"paginationSize\", \"\"),\r\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'TablePagi... Remove this comment to see the full error message\r\n          position: \"bottom\",\r\n          pageSize: options.itemsPerPage,\r\n          hideOnSinglePage: true,\r\n          showSizeChanger: false,\r\n        }}\r\n        showSorterTooltip={false}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nRenderer.propTypes = RendererPropTypes;\r\n"],"file":"Renderer.js"}