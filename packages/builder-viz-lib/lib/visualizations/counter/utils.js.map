{"version":3,"sources":["../../../src/visualizations/counter/utils.ts"],"names":["numberFormat","value","decimalPoints","decimalDelimiter","thousandsDelimiter","locale","numeral","localeData","savedDelimiters","delimiters","thousands","decimal","formatString","Number","isFinite","result","format","getRowNumber","index","rowsCount","parseInt","wrappedIndex","Math","abs","formatValue","stringPrefix","stringSuffix","stringDecimal","stringDecChar","stringThouSep","formatTooltip","getCounterData","rows","options","visualizationName","length","countRow","counterColName","targetColName","counterLabel","counterValue","rowNumber","showTrend","targetRowNumber","targetValue","delta","trendPositive","counterValueTooltip","tooltipFormat","targetValueTooltip","formatTargetValue","isValueNumber"],"mappings":"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","sourcesContent":["import { isNumber, isFinite, toString } from \"lodash\";\r\nimport numeral from \"numeral\";\r\n\r\n// TODO: allow user to specify number format string instead of delimiters only\r\n// It will allow to remove this function (move all that weird formatting logic to a migration\r\n// that will set number format for all existing counter visualization)\r\nfunction numberFormat(value: any, decimalPoints: any, decimalDelimiter: any, thousandsDelimiter: any) {\r\n  // Temporarily update locale data (restore defaults after formatting)\r\n  const locale = numeral.localeData();\r\n  const savedDelimiters = locale.delimiters;\r\n\r\n  // Mimic old behavior - AngularJS `number` filter defaults:\r\n  // - `,` as thousands delimiter\r\n  // - `.` as decimal delimiter\r\n  // - three decimal points\r\n  locale.delimiters = {\r\n    thousands: \",\",\r\n    decimal: \".\",\r\n  };\r\n  let formatString = \"0,0.000\";\r\n  if ((Number.isFinite(decimalPoints) && decimalPoints >= 0) || decimalDelimiter || thousandsDelimiter) {\r\n    locale.delimiters = {\r\n      thousands: thousandsDelimiter,\r\n      decimal: decimalDelimiter || \".\",\r\n    };\r\n\r\n    formatString = \"0,0\";\r\n    if (decimalPoints > 0) {\r\n      formatString += \".\";\r\n      while (decimalPoints > 0) {\r\n        formatString += \"0\";\r\n        decimalPoints -= 1;\r\n      }\r\n    }\r\n  }\r\n  const result = numeral(value).format(formatString);\r\n\r\n  locale.delimiters = savedDelimiters;\r\n  return result;\r\n}\r\n\r\n// 0 - special case, use first record\r\n// 1..N - 1-based record number from beginning (wraps if greater than dataset size)\r\n// -1..-N - 1-based record number from end (wraps if greater than dataset size)\r\nfunction getRowNumber(index: any, rowsCount: any) {\r\n  index = parseInt(index, 10) || 0;\r\n  if (index === 0) {\r\n    return index;\r\n  }\r\n  const wrappedIndex = (Math.abs(index) - 1) % rowsCount;\r\n  return index > 0 ? wrappedIndex : rowsCount - wrappedIndex - 1;\r\n}\r\n\r\nfunction formatValue(value: any, { stringPrefix, stringSuffix, stringDecimal, stringDecChar, stringThouSep }: any) {\r\n  if (isNumber(value)) {\r\n    value = numberFormat(value, stringDecimal, stringDecChar, stringThouSep);\r\n    return toString(stringPrefix) + value + toString(stringSuffix);\r\n  }\r\n  return toString(value);\r\n}\r\n\r\nfunction formatTooltip(value: any, formatString: any) {\r\n  if (isNumber(value)) {\r\n    return numeral(value).format(formatString);\r\n  }\r\n  return toString(value);\r\n}\r\n\r\nexport function getCounterData(rows: any, options: any, visualizationName: any) {\r\n  const result = {};\r\n  const rowsCount = rows.length;\r\n\r\n  if (rowsCount > 0 || options.countRow) {\r\n    const counterColName = options.counterColName;\r\n    const targetColName = options.targetColName;\r\n\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'counterLabel' does not exist on type '{}... Remove this comment to see the full error message\r\n    result.counterLabel = options.counterLabel || visualizationName;\r\n\r\n    if (options.countRow) {\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'counterValue' does not exist on type '{}... Remove this comment to see the full error message\r\n      result.counterValue = rowsCount;\r\n    } else if (counterColName) {\r\n      const rowNumber = getRowNumber(options.rowNumber, rowsCount);\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'counterValue' does not exist on type '{}... Remove this comment to see the full error message\r\n      result.counterValue = rows[rowNumber][counterColName];\r\n    }\r\n\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'showTrend' does not exist on type '{}'.\r\n    result.showTrend = false;\r\n\r\n    if (targetColName) {\r\n      const targetRowNumber = getRowNumber(options.targetRowNumber, rowsCount);\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'targetValue' does not exist on type '{}'... Remove this comment to see the full error message\r\n      result.targetValue = rows[targetRowNumber][targetColName];\r\n\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'counterValue' does not exist on type '{}... Remove this comment to see the full error message\r\n      if (Number.isFinite(result.counterValue) && isFinite(result.targetValue)) {\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'counterValue' does not exist on type '{}... Remove this comment to see the full error message\r\n        const delta = result.counterValue - result.targetValue;\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'showTrend' does not exist on type '{}'.\r\n        result.showTrend = true;\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'trendPositive' does not exist on type '{... Remove this comment to see the full error message\r\n        result.trendPositive = delta >= 0;\r\n      }\r\n    } else {\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'targetValue' does not exist on type '{}'... Remove this comment to see the full error message\r\n      result.targetValue = null;\r\n    }\r\n\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'counterValueTooltip' does not exist on t... Remove this comment to see the full error message\r\n    result.counterValueTooltip = formatTooltip(result.counterValue, options.tooltipFormat);\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'targetValueTooltip' does not exist on ty... Remove this comment to see the full error message\r\n    result.targetValueTooltip = formatTooltip(result.targetValue, options.tooltipFormat);\r\n\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'counterValue' does not exist on type '{}... Remove this comment to see the full error message\r\n    result.counterValue = formatValue(result.counterValue, options);\r\n\r\n    if (options.formatTargetValue) {\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'targetValue' does not exist on type '{}'... Remove this comment to see the full error message\r\n      result.targetValue = formatValue(result.targetValue, options);\r\n    } else {\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'targetValue' does not exist on type '{}'... Remove this comment to see the full error message\r\n      if (isFinite(result.targetValue)) {\r\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'targetValue' does not exist on type '{}'... Remove this comment to see the full error message\r\n        result.targetValue = numeral(result.targetValue).format(\"0[.]00[0]\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function isValueNumber(rows: any, options: any) {\r\n  if (options.countRow) {\r\n    return true; // array length is always a number\r\n  }\r\n\r\n  const rowsCount = rows.length;\r\n  if (rowsCount > 0) {\r\n    const rowNumber = getRowNumber(options.rowNumber, rowsCount);\r\n    const counterColName = options.counterColName;\r\n    if (counterColName) {\r\n      return isNumber(rows[rowNumber][counterColName]);\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n"],"file":"utils.js"}