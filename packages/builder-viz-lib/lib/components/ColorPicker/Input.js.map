{"version":3,"sources":["../../../src/components/ColorPicker/Input.tsx"],"names":["preparePresets","presetColors","presetColumns","v","title","value","isValid","toHex","toUpperCase","validateColor","callback","prefix","Input","color","onChange","onPressEnter","inputValue","setInputValue","isInputFocused","setIsInputFocused","presets","handleInputChange","group","index","e","target","defaultProps"],"mappings":"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","sourcesContent":["import { isNil, isArray, chunk, map, filter, toPairs } from \"lodash\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport tinycolor from \"tinycolor2\";\r\nimport TextInput from \"antd/lib/input\";\r\nimport Typography from \"antd/lib/typography\";\r\nimport Swatch from \"./Swatch\";\r\n\r\nimport \"./input.less\";\r\n\r\nfunction preparePresets(presetColors: any, presetColumns: any) {\r\n  presetColors = isArray(presetColors) ? map(presetColors, v => [null, v]) : toPairs(presetColors);\r\n  presetColors = map(presetColors, ([title, value]) => {\r\n    if (isNil(value)) {\r\n      return [title, null];\r\n    }\r\n    value = tinycolor(value);\r\n    if (value.isValid()) {\r\n      return [title, \"#\" + value.toHex().toUpperCase()];\r\n    }\r\n    return null;\r\n  });\r\n  return chunk(filter(presetColors), presetColumns);\r\n}\r\n\r\nfunction validateColor(value: any, callback: any, prefix = \"#\") {\r\n  if (isNil(value)) {\r\n    callback(null);\r\n  }\r\n  value = tinycolor(value);\r\n  if (value.isValid()) {\r\n    callback(prefix + value.toHex().toUpperCase());\r\n  }\r\n}\r\n\r\ntype OwnProps = {\r\n  color?: string;\r\n  presetColors?:\r\n    | string[]\r\n    | {\r\n        [key: string]: string;\r\n      };\r\n  presetColumns?: number;\r\n  onChange?: (...args: any[]) => any;\r\n  onPressEnter?: (...args: any[]) => any;\r\n};\r\n\r\ntype Props = OwnProps & typeof Input.defaultProps;\r\n\r\nexport default function Input({ color, presetColors, presetColumns, onChange, onPressEnter }: Props) {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [isInputFocused, setIsInputFocused] = useState(false);\r\n\r\n  const presets = preparePresets(presetColors, presetColumns);\r\n\r\n  function handleInputChange(value: any) {\r\n    setInputValue(value);\r\n    validateColor(value, onChange);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isInputFocused) {\r\n      validateColor(color, setInputValue, \"\");\r\n    }\r\n  }, [color, isInputFocused]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {map(presets, (group, index) => (\r\n        <div className=\"color-picker-input-swatches\" key={`preset-row-${index}`}>\r\n          {map(group, ([title, value]) => (\r\n            // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\r\n            <Swatch key={value} color={value} title={title} size={30} onClick={() => validateColor(value, onChange)} />\r\n          ))}\r\n        </div>\r\n      ))}\r\n      <div className=\"color-picker-input\">\r\n        <TextInput\r\n          data-test=\"ColorPicker.CustomColor\"\r\n          addonBefore={<Typography.Text type=\"secondary\">#</Typography.Text>}\r\n          value={inputValue}\r\n          onChange={e => handleInputChange(e.target.value)}\r\n          onFocus={() => setIsInputFocused(true)}\r\n          onBlur={() => setIsInputFocused(false)}\r\n          onPressEnter={onPressEnter}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nInput.defaultProps = {\r\n  color: \"#FFFFFF\",\r\n  presetColors: null,\r\n  presetColumns: 8,\r\n  onChange: () => {},\r\n  onPressEnter: () => {},\r\n};\r\n"],"file":"Input.js"}