{"version":3,"sources":["../../src/components/ErrorBoundary.tsx"],"names":["logger","ErrorBoundaryContext","React","createContext","handleError","error","setTimeout","reset","ErrorMessage","children","defaultProps","ErrorBoundary","Component","setState","constructor","getDerivedStateFromError","componentDidCatch","window","handleException","errorInfo","render","props","renderError","state"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,MAAM,GAAG,oBAAM,eAAN,CAAf;;AAEO,IAAMC,oBAAoB,GAAGC,eAAMC,aAAN,CAAoB;AACtDC,EAAAA,WAAW,EAAGC,KAAD,IAAgB;AAC3B;AACAC,IAAAA,UAAU,CAAC,MAAM;AACf,YAAMD,KAAN;AACD,KAFS,CAAV;AAGD,GANqD;AAOtDE,EAAAA,KAAK,EAAE,MAAM,CAAE;AAPuC,CAApB,CAA7B;;;;AAgBA,SAASC,YAAT,OAAuD;AAAA,MAA/BC,QAA+B,QAA/BA,QAA+B;AAC5D,sBAAO,6BAAC,cAAD;AAAO,IAAA,OAAO,EAAEA,QAAhB;AAA0B,IAAA,IAAI,EAAC,OAA/B;AAAuC,IAAA,QAAQ;AAA/C,IAAP;AACD;;AAEDD,YAAY,CAACE,YAAb,GAA4B;AAC1BD,EAAAA,QAAQ,EAAE;AADgB,CAA5B;;AAYe,MAAME,aAAN,SAA4BT,eAAMU,SAAlC,CAAoF;AAAA;AAAA;;AAAA,mCAMzF;AAAEP,MAAAA,KAAK,EAAE;AAAT,KANyF;;AAAA,yCAQlFA,KAAD,IAAgB;AAC5B;AACA,WAAKQ,QAAL,CAAc,KAAKC,WAAL,CAAiBC,wBAAjB,CAA0CV,KAA1C,CAAd;AACA,WAAKW,iBAAL,CAAuBX,KAAvB,EAA8B,IAA9B,EAH4B,CAI5B;;AACA,UAAI,wBAAWY,MAAM,CAACC,eAAlB,CAAJ,EAAwC;AACtC;AACAD,QAAAA,MAAM,CAACC,eAAP,CAAuBb,KAAvB;AACD;AACF,KAjBgG;;AAAA,mCAmBzF,MAAM;AACZ,WAAKQ,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KArBgG;AAAA;;AAuBjG,SAAOU,wBAAP,CAAgCV,KAAhC,EAA4C;AAC1C,WAAO;AAAEA,MAAAA;AAAF,KAAP;AACD;;AAEDW,EAAAA,iBAAiB,CAACX,KAAD,EAAac,SAAb,EAA6B;AAC5CnB,IAAAA,MAAM,CAACK,KAAD,EAAQc,SAAR,CAAN;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,sBAC2B,KAAKC,KADhC;AAAA,QACCC,WADD,eACCA,WADD;AAAA,QACcb,QADd,eACcA,QADd;AAAA,QAECJ,KAFD,GAEW,KAAKkB,KAFhB,CAEClB,KAFD;;AAIP,QAAIA,KAAJ,EAAW;AACT,UAAI,wBAAWiB,WAAX,CAAJ,EAA6B;AAC3B;AACA,eAAOA,WAAW,CAACjB,KAAD,CAAlB;AACD;;AACD,0BAAO,6BAAC,YAAD,OAAP;AACD;;AAED,wBAAO,6BAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAE;AAAtC,OAA6CI,QAA7C,CAAP;AACD;;AA5CgG;;;;gBAA9EE,a,kBACG;AACpBF,EAAAA,QAAQ,EAAE,IADU;AAEpBa,EAAAA,WAAW,EAAE;AAFO,C","sourcesContent":["import { isFunction } from \"lodash\";\r\nimport React from \"react\";\r\nimport debug from \"debug\";\r\nimport Alert from \"antd/lib/alert\";\r\n\r\nconst logger = debug(\"redash:errors\");\r\n\r\nexport const ErrorBoundaryContext = React.createContext({\r\n  handleError: (error: any) => {\r\n    // Allow calling chain to roll up, and then throw the error in global context\r\n    setTimeout(() => {\r\n      throw error;\r\n    });\r\n  },\r\n  reset: () => {},\r\n});\r\n\r\ntype OwnErrorMessageProps = {\r\n  children?: React.ReactNode;\r\n};\r\n\r\ntype ErrorMessageProps = OwnErrorMessageProps & typeof ErrorMessage.defaultProps;\r\n\r\nexport function ErrorMessage({ children }: ErrorMessageProps) {\r\n  return <Alert message={children} type=\"error\" showIcon />;\r\n}\r\n\r\nErrorMessage.defaultProps = {\r\n  children: \"Something went wrong.\",\r\n};\r\n\r\ntype OwnErrorBoundaryProps = {\r\n  renderError?: (...args: any[]) => any;\r\n};\r\n\r\ntype ErrorBoundaryState = any;\r\n\r\ntype ErrorBoundaryProps = OwnErrorBoundaryProps & typeof ErrorBoundary.defaultProps;\r\n\r\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\r\n  static defaultProps = {\r\n    children: null,\r\n    renderError: null,\r\n  };\r\n\r\n  state = { error: null };\r\n\r\n  handleError = (error: any) => {\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'getDerivedStateFromError' does not exist... Remove this comment to see the full error message\r\n    this.setState(this.constructor.getDerivedStateFromError(error));\r\n    this.componentDidCatch(error, null);\r\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'handleException' does not exist on type ... Remove this comment to see the full error message\r\n    if (isFunction(window.handleException)) {\r\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'handleException' does not exist on type ... Remove this comment to see the full error message\r\n      window.handleException(error);\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ error: null });\r\n  };\r\n\r\n  static getDerivedStateFromError(error: any) {\r\n    return { error };\r\n  }\r\n\r\n  componentDidCatch(error: any, errorInfo: any) {\r\n    logger(error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    const { renderError, children } = this.props;\r\n    const { error } = this.state;\r\n\r\n    if (error) {\r\n      if (isFunction(renderError)) {\r\n        // @ts-expect-error ts-migrate(2349) FIXME: This expression is not callable.\r\n        return renderError(error);\r\n      }\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return <ErrorBoundaryContext.Provider value={this}>{children}</ErrorBoundaryContext.Provider>;\r\n  }\r\n}\r\n"],"file":"ErrorBoundary.js"}